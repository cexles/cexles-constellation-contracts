{
  "address": "0x973eb82B75Be09B901Dd8295f4105b3141032fDd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        },
        {
          "internalType": "contract IERC6551Registry",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_accountImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        },
        {
          "internalType": "contract ITokenAccess",
          "name": "_tokenContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        }
      ],
      "name": "DestinationChainNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "name": "ErrorInCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "FailedToWithdrawEth",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "InvalidRouter",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "calculatedFees",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NothingToWithdraw",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SenderNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "sourceChainSelector",
          "type": "uint64"
        }
      ],
      "name": "SourceChainNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "sourceChainSelector",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "text",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "MessageReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "destinationChainSelector",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "dataToSend",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "addressToExecute",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "valueToExecute",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dataToExecute",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "feeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "gasLimit",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct TransshipmentWorker.MassageParam",
          "name": "massageParam",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accountImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_destinationChainSelector",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "allowlistDestinationChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "allowlistSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_sourceChainSelector",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "allowlistSourceChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "allowlistedDestinationChains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowlistedSenders",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "allowlistedSourceChains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "messageId",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "sourceChainSelector",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "sender",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Client.EVMTokenAmount[]",
              "name": "destTokenAmounts",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Client.Any2EVMMessage",
          "name": "message",
          "type": "tuple"
        }
      ],
      "name": "ccipReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "accountAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastReceivedMessageDetails",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "isBytesEmpty",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IERC6551Registry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastReceivedData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastReceivedMessageId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastReceivedTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastReceivedTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "salt",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "destinationChainSelector",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "dataToSend",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "addressToExecute",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "valueToExecute",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dataToExecute",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "feeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "gasLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct TransshipmentWorker.MassageParam",
          "name": "massageParam",
          "type": "tuple"
        }
      ],
      "name": "sendMassage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "destinationChainSelector",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "dataToSend",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "addressToExecute",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "valueToExecute",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dataToExecute",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "feeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "gasLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct TransshipmentWorker.MassageParam[]",
          "name": "massageParams",
          "type": "tuple[]"
        }
      ],
      "name": "sendUniversalMassage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenContract",
      "outputs": [
        {
          "internalType": "contract ITokenAccess",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x60a00b563f6d3372c64ba517c28f56dc91b4727c5fbcf597f3e51d7cde71c3a2",
  "receipt": {
    "to": null,
    "from": "0x4803003e06Fe7Bc150cC8CB21D12750A1A1bA135",
    "contractAddress": "0x973eb82B75Be09B901Dd8295f4105b3141032fDd",
    "transactionIndex": 3,
    "gasUsed": "2064535",
    "logsBloom": "0x
    "blockHash": "0x4c8e3c3ac66237fb333af0ae39ab22a07b9d4664cce39e44bcc791651bff6a3f",
    "transactionHash": "0x60a00b563f6d3372c64ba517c28f56dc91b4727c5fbcf597f3e51d7cde71c3a2",
    "logs": [],
    "blockNumber": 35236424,
    "cumulativeGasUsed": "2207150",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9527E2d01A3064ef6b50c1Da1C0cC523803BCFF2",
    "0x84b9B910527Ad5C03A9Ca831909E21e236EA7b06",
    "0x0000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 4,
  "solcInputHash": "ce1c44e787c893d5ca04449cc9db3750",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"contract IERC6551Registry\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_accountImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"},{\"internalType\":\"contract ITokenAccess\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"}],\"name\":\"DestinationChainNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"ErrorInCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FailedToWithdrawEth\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"InvalidRouter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calculatedFees\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToWithdraw\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"}],\"name\":\"SourceChainNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"text\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"MessageReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"dataToSend\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"addressToExecute\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueToExecute\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dataToExecute\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct TransshipmentWorker.MassageParam\",\"name\":\"massageParam\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_destinationChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"allowlistDestinationChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"allowlistSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"allowlistSourceChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"allowlistedDestinationChains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowlistedSenders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"allowlistedSourceChains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Client.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Client.Any2EVMMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"ccipReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastReceivedMessageDetails\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"isBytesEmpty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IERC6551Registry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastReceivedData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastReceivedMessageId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastReceivedTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastReceivedTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"dataToSend\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"addressToExecute\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueToExecute\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dataToExecute\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct TransshipmentWorker.MassageParam\",\"name\":\"massageParam\",\"type\":\"tuple\"}],\"name\":\"sendMassage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"dataToSend\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"addressToExecute\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueToExecute\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dataToExecute\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct TransshipmentWorker.MassageParam[]\",\"name\":\"massageParams\",\"type\":\"tuple[]\"}],\"name\":\"sendUniversalMassage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract ITokenAccess\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowlistDestinationChain(uint64,bool)\":{\"details\":\"Updates the allowlist status of a destination chain for transactions.\",\"params\":{\"_destinationChainSelector\":\"The selector of the destination chain to be updated.\",\"allowed\":\"The allowlist status to be set for the destination chain.\"}},\"allowlistSender(address,bool)\":{\"details\":\"Updates the allowlist status of a sender for transactions.\",\"params\":{\"_sender\":\"The address of the sender to be updated.\",\"allowed\":\"The allowlist status to be set for the sender.\"}},\"allowlistSourceChain(uint64,bool)\":{\"details\":\"Updates the allowlist status of a source chain\",\"params\":{\"_sourceChainSelector\":\"The selector of the source chain to be updated.\",\"allowed\":\"The allowlist status to be set for the source chain.\"}},\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"details\":\"Note ensure you check the msg.sender is the OffRampRouter\",\"params\":{\"message\":\"CCIP Message\"}},\"getLastReceivedMessageDetails()\":{\"details\":\"This function retrieves the ID, text, token address, and token amount of the last received CCIP message.\",\"returns\":{\"data\":\"The data of the last received CCIP message.\",\"messageId\":\"The ID of the last received CCIP message.\",\"tokenAddress\":\"The address of the token in the last CCIP received message.\",\"tokenAmount\":\"The amount of the token in the last CCIP received message.\"}},\"getRouter()\":{\"returns\":{\"_0\":\"i_router address\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"The interfaceId to check\"},\"returns\":{\"_0\":\"true if the interfaceId is supported\"}},\"withdraw(address)\":{\"details\":\"This function reverts if there are no funds to withdraw or if the transfer fails. It should only be callable by the owner of the contract.\",\"params\":{\"_beneficiary\":\"The address to which the Ether should be sent.\"}},\"withdrawToken(address,address)\":{\"details\":\"This function reverts with a 'NothingToWithdraw' error if there are no tokens to withdraw.\",\"params\":{\"_beneficiary\":\"The address to which the tokens will be sent.\",\"_token\":\"The contract address of the ERC20 token to be withdrawn.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ErrorInCall(bytes)\":[{\"notice\":\"fails when call is wrong.\"}]},\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"allowlistDestinationChain(uint64,bool)\":{\"notice\":\"This function can only be called by the owner.\"},\"allowlistSender(address,bool)\":{\"notice\":\"This function can only be called by the owner.\"},\"allowlistSourceChain(uint64,bool)\":{\"notice\":\"This function can only be called by the owner.\"},\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"notice\":\"Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution.\"},\"getLastReceivedMessageDetails()\":{\"notice\":\"Returns the details of the last CCIP received message.\"},\"getRouter()\":{\"notice\":\"Return the current router\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"supportsInterface(bytes4)\":{\"notice\":\"IERC165 supports an interfaceId\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"},\"withdraw(address)\":{\"notice\":\"Allows the contract owner to withdraw the entire balance of Ether from the contract.\"},\"withdrawToken(address,address)\":{\"notice\":\"Allows the owner of the contract to withdraw all tokens of a specific ERC20 token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Transshipment.sol\":\"Transshipment\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAny2EVMMessageReceiver} from \\\"../interfaces/IAny2EVMMessageReceiver.sol\\\";\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\nimport {IERC165} from \\\"../../vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol\\\";\\n\\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\\nabstract contract CCIPReceiver is IAny2EVMMessageReceiver, IERC165 {\\n  address internal immutable i_router;\\n\\n  constructor(address router) {\\n    if (router == address(0)) revert InvalidRouter(address(0));\\n    i_router = router;\\n  }\\n\\n  /// @notice IERC165 supports an interfaceId\\n  /// @param interfaceId The interfaceId to check\\n  /// @return true if the interfaceId is supported\\n  function supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\\n    return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\\n  }\\n\\n  /// @inheritdoc IAny2EVMMessageReceiver\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external virtual override onlyRouter {\\n    _ccipReceive(message);\\n  }\\n\\n  /// @notice Override this function in your implementation.\\n  /// @param message Any2EVMMessage\\n  function _ccipReceive(Client.Any2EVMMessage memory message) internal virtual;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  // Plumbing\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Return the current router\\n  /// @return i_router address\\n  function getRouter() public view returns (address) {\\n    return address(i_router);\\n  }\\n\\n  error InvalidRouter(address router);\\n\\n  /// @dev only calls from the set router are accepted.\\n  modifier onlyRouter() {\\n    if (msg.sender != address(i_router)) revert InvalidRouter(msg.sender);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xcf5d0a5cd6ed0f6a9ed721b3e532c0504ed1ba3ab6d3567165876ceb4f23b084\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\n/// @notice Application contracts that intend to receive messages from\\n/// the router should implement this interface.\\ninterface IAny2EVMMessageReceiver {\\n  /// @notice Called by the Router to deliver a message.\\n  /// If this reverts, any token transfers also revert. The message\\n  /// will move to a FAILED state and become available for manual execution.\\n  /// @param message CCIP Message\\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external;\\n}\\n\",\"keccak256\":\"0xd2a05a4f58a453cbf8cfa6aa78f58cb8e42091b3a025f711a0aa51f584e16b48\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param chainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\\n\\n  /// @notice Gets a list of all supported tokens which can be sent or received\\n  /// to/from a given chain id.\\n  /// @param chainSelector The chainSelector.\\n  /// @return tokens The addresses of all tokens that are supported.\\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns guaranteed execution fee for the specified message\\n  /// delivery to destination chain\\n  /// @dev returns 0 fee on invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x9899fab6a40f68408ddf153612c553f2441ea27770176bf71ccce22c40393286\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit and strict = false.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // extraArgs will evolve to support new features\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit; // ATTENTION!!! MAX GAS LIMIT 4M FOR BETA TESTING\\n    bool strict; // See strict sequencing details below.\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x2fb8e11d517fa5ee213aaab3f4d416155cd2b72d61ba443dbeff6b41d29e9523\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/shared/access/OwnerIsCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwner} from \\\"../../ConfirmedOwner.sol\\\";\\n\\n/// @title The OwnerIsCreator contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract OwnerIsCreator is ConfirmedOwner {\\n  constructor() ConfirmedOwner(msg.sender) {}\\n}\\n\",\"keccak256\":\"0x010d0a67d81c4020004f72d95e8a7b08b98178de026e96565f315806e7525ada\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n}\",\"keccak256\":\"0xf7a52b7d3a7b79117544d6bbeb8564bd22c760c4937d69914b99641a957a8f2a\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n    * @dev Returns true if this contract implements the interface defined by\\n    * `interfaceId`. See the corresponding\\n    * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n    * to learn more about how these ids are created.\\n    *\\n    * This function call must use less than 30 000 gas.\\n    */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\",\"keccak256\":\"0xac7a4bfe791ee9fe125cac5cd25795b326433e5cf2bdd6b02ad6ad42c2d126a5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Transshipment.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {TransshipmentWorker, Client, IRouterClient, IERC20} from \\\"./TransshipmentWorker.sol\\\";\\nimport {IERC6551Registry} from \\\"./interfaces/IERC6551Registry.sol\\\";\\nimport {ITokenAccess} from \\\"./interfaces/ITokenAccess.sol\\\";\\n\\ncontract Transshipment is TransshipmentWorker {\\n    IERC6551Registry public registry;\\n    address public accountImplementation;\\n    bytes32 public salt;\\n    ITokenAccess public tokenContract;\\n    mapping(address => bool) accounts;\\n\\n    //TODO: Plan:\\n    // 1. Add received massage validation\\n    // 2. Add received massage execution\\n    // 3. Add account call Transshipment sendMassage\\n    // 4. Validate received massage RootOwner == TargetRootOwner for call from dstAccount\\n    // 5. Think about srcAccount -> srcTransshipment ---> dstTransshipment -> dstAccount logic and validations\\n    // 6. Account bridge reserves functionality\\n\\n    // mapping(address => uint256) public nonces;\\n\\n    constructor(\\n        address _router,\\n        address _link,\\n        IERC6551Registry _registry,\\n        address _accountImplementation,\\n        bytes32 _salt,\\n        ITokenAccess _tokenContract\\n    ) TransshipmentWorker(_router, _link) {\\n        registry = _registry;\\n        accountImplementation = _accountImplementation;\\n        salt = _salt;\\n        tokenContract = _tokenContract;\\n    }\\n\\n    function createAccount() external returns (address accountAddress) {\\n        // Every one can have only one account! All communicate with help of rootAccount!\\n        uint256 tokenId = uint256(keccak256(abi.encodePacked(msg.sender, block.chainid)));\\n        bool success = tokenContract.mint(msg.sender, tokenId);\\n        require(success, \\\"Account creation failed\\\");\\n        accountAddress = registry.createAccount(\\n            accountImplementation,\\n            salt,\\n            block.chainid,\\n            address(tokenContract),\\n            tokenId\\n        );\\n        accounts[accountAddress] = true;\\n    }\\n\\n    function sendUniversalMassage(MassageParam[] calldata massageParams) external {\\n        for (uint256 i = 0; i < massageParams.length; i++) {\\n            _sendMessage(massageParams[i]);\\n        }\\n    }\\n\\n    function sendMassage(MassageParam calldata massageParam) public {\\n        _sendMessage(massageParam);\\n    }\\n\\n    function _sendMessage(\\n        MassageParam calldata massageParam\\n    )\\n        internal\\n        override\\n        onlyAllowlistedDestinationChain(massageParam.destinationChainSelector)\\n        returns (bytes32 messageId)\\n    {\\n        require(\\n            massageParam.feeToken == address(0) || massageParam.feeToken == address(s_linkToken),\\n            \\\"Wrong fee token address\\\"\\n        );\\n\\n        // Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\\n        Client.EVM2AnyMessage memory evm2AnyMessage = _buildCCIPMessage(\\n            massageParam.receiver,\\n            massageParam.dataToSend,\\n            massageParam.token,\\n            massageParam.amount,\\n            massageParam.feeToken,\\n            massageParam.gasLimit\\n        );\\n        // TODO: EXECUTE when get massage massageParam.dataToExecute\\n        // Initialize a router client instance to interact with cross-chain router\\n        IRouterClient router = IRouterClient(this.getRouter());\\n        // Get the fee required to send the CCIP message\\n        uint256 fees = router.getFee(massageParam.destinationChainSelector, evm2AnyMessage);\\n\\n        uint256 nativeFees = 0;\\n        if (address(0) == massageParam.feeToken) {\\n            if (fees > address(this).balance) revert NotEnoughBalance(address(this).balance, fees);\\n            nativeFees = fees;\\n        } else {\\n            if (fees > s_linkToken.balanceOf(address(this)))\\n                revert NotEnoughBalance(s_linkToken.balanceOf(address(this)), fees);\\n            // approve the Router to transfer LINK tokens on contract's behalf. It will spend the fees in LINK\\n            s_linkToken.approve(address(router), fees);\\n        }\\n        // approve the Router to spend tokens on contract's behalf. It will spend the amount of the given token\\n        IERC20(massageParam.token).approve(address(router), massageParam.amount);\\n        // Send the message through the router and store the returned message ID\\n\\n        messageId = router.ccipSend{value: nativeFees}(massageParam.destinationChainSelector, evm2AnyMessage);\\n        // Emit an event with message details\\n        emit MessageSent(\\n            messageId,\\n            massageParam,\\n            // massageParam.destinationChainSelector,\\n            // massageParam.receiver,\\n            // massageParam.dataToSend,\\n            // massageParam.addressToExecute,\\n            // massageParam.valueToExecute,\\n            // massageParam.dataToExecute,\\n            // massageParam.token,\\n            // massageParam.amount,\\n            // massageParam.feeToken,\\n            fees\\n        );\\n        // Return the message ID\\n        return messageId;\\n    }\\n\\n    // struct MassageParam {\\n    //     uint64 destinationChainSelector;\\n    //     address receiver;\\n    //     bytes dataToSend;\\n    //     address addressToExecute;\\n    //     uint256 valueToExecute;\\n    //     bytes dataToExecute;\\n    //     // bytes dataToExecute; // (address, value, data)\\n    //     address token;\\n    //     uint256 amount;\\n    //     address feeToken; // native - address(0) or link - _s_link\\n    //     uint256 gasLimit;\\n    // }\\n\\n    function _ccipReceive(\\n        Client.Any2EVMMessage memory any2EvmMessage\\n    )\\n        internal\\n        virtual\\n        override\\n        onlyAllowlisted(any2EvmMessage.sourceChainSelector, abi.decode(any2EvmMessage.sender, (address)))\\n    {\\n        // TODO: add check userId with srcChain and destinationCaller\\n        // TODO: add check addressToExecute != address(this) ?\\n\\n        MassageParam memory massageParam = abi.decode(any2EvmMessage.data, (MassageParam));\\n        if (!isBytesEmpty(massageParam.dataToExecute)) {\\n            bytes memory result = execute(\\n                massageParam.addressToExecute,\\n                massageParam.valueToExecute,\\n                massageParam.dataToExecute\\n            );\\n        }\\n\\n        if (!isBytesEmpty(massageParam.dataToSend)) {\\n            massageParam = abi.decode(massageParam.dataToSend, (MassageParam));\\n            this.sendMassage(massageParam); // convert massageParam to calldata store type\\n        }\\n\\n        // s_lastReceivedMessageId = any2EvmMessage.messageId; // fetch the messageId\\n        // s_lastReceivedData = any2EvmMessage.data; // abi-decoding of the sent text\\n        // // Expect one token to be transferred at once, but you can transfer several tokens.\\n        // s_lastReceivedTokenAddress = any2EvmMessage.destTokenAmounts[0].token;\\n        // s_lastReceivedTokenAmount = any2EvmMessage.destTokenAmounts[0].amount;\\n\\n        emit MessageReceived(\\n            any2EvmMessage.messageId,\\n            any2EvmMessage.sourceChainSelector, // fetch the source chain identifier (aka selector)\\n            abi.decode(any2EvmMessage.sender, (address)), // abi-decoding of the sender address,\\n            any2EvmMessage.data,\\n            any2EvmMessage.destTokenAmounts[0].token,\\n            any2EvmMessage.destTokenAmounts[0].amount\\n        );\\n    }\\n\\n    function isBytesEmpty(bytes memory data) public pure returns (bool) {\\n        for (uint256 i = 0; i < data.length; i++) {\\n            if (data[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function multicall() external returns (bool) {} // And this contract will be multicallForwarder\\n\\n    /// fails when call is wrong.\\n    error ErrorInCall(bytes result);\\n\\n    function execute(address target, uint256 value, bytes memory data) public returns (bytes memory result) {\\n        // ++state;\\n\\n        bool success;\\n        (success, result) = target.call{value: value}(data);\\n\\n        if (!success) revert ErrorInCall(result);\\n    }\\n}\\n\",\"keccak256\":\"0x5bcdc59f97a36dc747118d179ca51cb3dd724b45d84f939c455f9765b42d1992\",\"license\":\"MIT\"},\"contracts/TransshipmentWorker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {IRouterClient} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\nimport {OwnerIsCreator} from \\\"@chainlink/contracts-ccip/src/v0.8/shared/access/OwnerIsCreator.sol\\\";\\nimport {Client} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\nimport {CCIPReceiver} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\\\";\\nimport {IERC20} from \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol\\\";\\n\\n/// @title - A simple messenger contract for transferring/receiving tokens and data across chains.\\nabstract contract TransshipmentWorker is CCIPReceiver, OwnerIsCreator {\\n    // Custom errors to provide more descriptive revert messages.\\n    error NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees); // Used to make sure contract has enough balance to cover the fees.\\n    error NothingToWithdraw(); // Used when trying to withdraw Ether but there's nothing to withdraw.\\n    error FailedToWithdrawEth(address owner, address target, uint256 value); // Used when the withdrawal of Ether fails.\\n    error DestinationChainNotAllowed(uint64 destinationChainSelector); // Used when the destination chain has not been allowlisted by the contract owner.\\n    error SourceChainNotAllowed(uint64 sourceChainSelector); // Used when the source chain has not been allowlisted by the contract owner.\\n    error SenderNotAllowed(address sender); // Used when the sender has not been allowlisted by the contract owner.\\n\\n    // Event emitted when a message is sent to another chain.\\n    event MessageSent(\\n        bytes32 indexed messageId, // The unique ID of the CCIP message.\\n        MassageParam massageParam,\\n        // uint64 indexed destinationChainSelector, // The chain selector of the destination chain.\\n        // address receiver, // The address of the receiver on the destination chain.\\n        // bytes dataToSend,\\n        // address addressToExecute,\\n        // uint256 valueToExecute,\\n        // bytes dataToExecute,\\n        // address token, // The token address that was transferred.\\n        // uint256 tokenAmount, // The token amount that was transferred.\\n        // address feeToken, // the token address used to pay CCIP fees.\\n        uint256 fees // The fees paid for sending the message.\\n    );\\n\\n    // Event emitted when a message is received from another chain.\\n    event MessageReceived(\\n        bytes32 indexed messageId, // The unique ID of the CCIP message.\\n        uint64 indexed sourceChainSelector, // The chain selector of the source chain.\\n        address sender, // The address of the sender from the source chain.\\n        bytes text, // The text that was received.\\n        address token, // The token address that was transferred.\\n        uint256 tokenAmount // The token amount that was transferred.\\n    );\\n\\n    bytes32 public s_lastReceivedMessageId; // Store the last received messageId.\\n    address public s_lastReceivedTokenAddress; // Store the last received token address.\\n    uint256 public s_lastReceivedTokenAmount; // Store the last received amount.\\n    bytes public s_lastReceivedData; // Store the last received text.\\n\\n    // Mapping to keep track of allowlisted destination chains.\\n    mapping(uint64 => bool) public allowlistedDestinationChains;\\n\\n    // Mapping to keep track of allowlisted source chains.\\n    mapping(uint64 => bool) public allowlistedSourceChains;\\n\\n    // Mapping to keep track of allowlisted senders.\\n    mapping(address => bool) public allowlistedSenders;\\n\\n    IERC20 internal s_linkToken;\\n\\n    /// @notice Constructor initializes the contract with the router address.\\n    /// @param _router The address of the router contract.\\n    /// @param _link The address of the link contract.\\n    constructor(address _router, address _link) CCIPReceiver(_router) {\\n        s_linkToken = IERC20(_link);\\n    }\\n\\n    /// @dev Modifier that checks if the chain with the given destinationChainSelector is allowlisted.\\n    /// @param _destinationChainSelector The selector of the destination chain.\\n    modifier onlyAllowlistedDestinationChain(uint64 _destinationChainSelector) {\\n        // TODO: add checks\\n        // if (!allowlistedDestinationChains[_destinationChainSelector])\\n        //     revert DestinationChainNotAllowed(_destinationChainSelector);\\n        _;\\n    }\\n\\n    /// @dev Modifier that checks if the chain with the given sourceChainSelector is allowlisted and if the sender is allowlisted.\\n    /// @param _sourceChainSelector The selector of the destination chain.\\n    /// @param _sender The address of the sender.\\n    modifier onlyAllowlisted(uint64 _sourceChainSelector, address _sender) {\\n        // TODO: add checks\\n        // if (!allowlistedSourceChains[_sourceChainSelector]) revert SourceChainNotAllowed(_sourceChainSelector);\\n        // if (!allowlistedSenders[_sender]) revert SenderNotAllowed(_sender);\\n        _;\\n    }\\n\\n    /// @dev Updates the allowlist status of a destination chain for transactions.\\n    /// @notice This function can only be called by the owner.\\n    /// @param _destinationChainSelector The selector of the destination chain to be updated.\\n    /// @param allowed The allowlist status to be set for the destination chain.\\n    function allowlistDestinationChain(uint64 _destinationChainSelector, bool allowed) external onlyOwner {\\n        allowlistedDestinationChains[_destinationChainSelector] = allowed;\\n    }\\n\\n    /// @dev Updates the allowlist status of a source chain\\n    /// @notice This function can only be called by the owner.\\n    /// @param _sourceChainSelector The selector of the source chain to be updated.\\n    /// @param allowed The allowlist status to be set for the source chain.\\n    function allowlistSourceChain(uint64 _sourceChainSelector, bool allowed) external onlyOwner {\\n        allowlistedSourceChains[_sourceChainSelector] = allowed;\\n    }\\n\\n    /// @dev Updates the allowlist status of a sender for transactions.\\n    /// @notice This function can only be called by the owner.\\n    /// @param _sender The address of the sender to be updated.\\n    /// @param allowed The allowlist status to be set for the sender.\\n    function allowlistSender(address _sender, bool allowed) external onlyOwner {\\n        allowlistedSenders[_sender] = allowed;\\n    }\\n\\n    /// @param destinationChainSelector The identifier (aka selector) for the destination blockchain.\\n    /// @param receiver The address of the recipient on the destination blockchain.\\n    /// @param dataToSend The data to be sent.\\n    /// @param addressToExecute The address of the call on the destination blockchain.\\n    /// @param valueToExecute The eth(native token) value to be sent with execution at the destination blockchain.\\n    /// @param dataToExecute The data to be executed at the destination blockchain.\\n    /// @param token token address.\\n    /// @param amount token amount.\\n    /// @param feeToken Fee token address: native - address(0) or link - _s_link.\\n    /// @param gasLimit Gas limit for destination chain.\\n    struct MassageParam {\\n        uint64 destinationChainSelector;\\n        address receiver;\\n        bytes dataToSend;\\n        address addressToExecute;\\n        uint256 valueToExecute;\\n        bytes dataToExecute;\\n        // bytes dataToExecute; // (address, value, data)\\n        address token;\\n        uint256 amount;\\n        address feeToken; // native - address(0) or link - _s_link\\n        uint256 gasLimit;\\n    }\\n\\n    /// @notice Sends data and transfer tokens to receiver on the destination chain.\\n    /// @notice Pay for fees in LINK.\\n    /// @dev Assumes your contract has sufficient LINK to pay for CCIP fees.\\n\\n    /// @return messageId The ID of the CCIP message that was sent.\\n    function _sendMessage(MassageParam calldata massageParam) internal virtual returns (bytes32 messageId);\\n\\n    /**\\n     * @notice Returns the details of the last CCIP received message.\\n     * @dev This function retrieves the ID, text, token address, and token amount of the last received CCIP message.\\n     * @return messageId The ID of the last received CCIP message.\\n     * @return data The data of the last received CCIP message.\\n     * @return tokenAddress The address of the token in the last CCIP received message.\\n     * @return tokenAmount The amount of the token in the last CCIP received message.\\n     */\\n    function getLastReceivedMessageDetails()\\n        public\\n        view\\n        returns (bytes32 messageId, bytes memory data, address tokenAddress, uint256 tokenAmount)\\n    {\\n        return (s_lastReceivedMessageId, s_lastReceivedData, s_lastReceivedTokenAddress, s_lastReceivedTokenAmount);\\n    }\\n\\n    /// handle a received message\\n    function _ccipReceive(Client.Any2EVMMessage memory any2EvmMessage) internal virtual override;\\n\\n    /// @notice Construct a CCIP message.\\n    /// @dev This function will create an EVM2AnyMessage struct with all the necessary information for programmable tokens transfer.\\n    /// @param _receiver The address of the receiver.\\n    /// @param _data The string data to be sent.\\n    /// @param _token The token to be transferred.\\n    /// @param _amount The amount of the token to be transferred.\\n    /// @param _feeTokenAddress The address of the token used for fees. Set address(0) for native gas.\\n    /// @param _gasLimit Gas limit for destination chain.\\n    /// @return Client.EVM2AnyMessage Returns an EVM2AnyMessage struct which contains information for sending a CCIP message.\\n    function _buildCCIPMessage(\\n        address _receiver,\\n        bytes calldata _data,\\n        address _token,\\n        uint256 _amount,\\n        address _feeTokenAddress,\\n        uint256 _gasLimit\\n    ) internal pure returns (Client.EVM2AnyMessage memory) {\\n        // Set the token amounts\\n        Client.EVMTokenAmount[] memory tokenAmounts = new Client.EVMTokenAmount[](1);\\n        tokenAmounts[0] = Client.EVMTokenAmount({token: _token, amount: _amount});\\n        // Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\\n        return\\n            Client.EVM2AnyMessage({\\n                receiver: abi.encode(_receiver), // ABI-encoded receiver address\\n                data: _data,\\n                tokenAmounts: tokenAmounts, // The amount and type of token being transferred\\n                extraArgs: Client._argsToBytes(\\n                    // Additional arguments, setting gas limit and non-strict sequencing mode\\n                    Client.EVMExtraArgsV1({gasLimit: _gasLimit, strict: false}) //TODO: get gasLimit\\n                ),\\n                // Set the feeToken to a feeTokenAddress, indicating specific asset will be used for fees\\n                feeToken: _feeTokenAddress\\n            });\\n    }\\n\\n    /// @notice Fallback function to allow the contract to receive Ether.\\n    /// @dev This function has no function body, making it a default function for receiving Ether.\\n    /// It is automatically called when Ether is sent to the contract without any data.\\n    receive() external payable {}\\n\\n    /// @notice Allows the contract owner to withdraw the entire balance of Ether from the contract.\\n    /// @dev This function reverts if there are no funds to withdraw or if the transfer fails.\\n    /// It should only be callable by the owner of the contract.\\n    /// @param _beneficiary The address to which the Ether should be sent.\\n    // TODO: remove method\\n    function withdraw(address _beneficiary) public onlyOwner {\\n        // Retrieve the balance of this contract\\n        uint256 amount = address(this).balance;\\n\\n        // Revert if there is nothing to withdraw\\n        if (amount == 0) revert NothingToWithdraw();\\n\\n        // Attempt to send the funds, capturing the success status and discarding any return data\\n        (bool sent, ) = _beneficiary.call{value: amount}(\\\"\\\");\\n\\n        // Revert if the send failed, with information about the attempted transfer\\n        if (!sent) revert FailedToWithdrawEth(msg.sender, _beneficiary, amount);\\n    }\\n\\n    /// @notice Allows the owner of the contract to withdraw all tokens of a specific ERC20 token.\\n    /// @dev This function reverts with a 'NothingToWithdraw' error if there are no tokens to withdraw.\\n    /// @param _beneficiary The address to which the tokens will be sent.\\n    /// @param _token The contract address of the ERC20 token to be withdrawn.\\n    // TODO: remove method\\n    function withdrawToken(address _beneficiary, address _token) public onlyOwner {\\n        // Retrieve the balance of this contract\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n\\n        // Revert if there is nothing to withdraw\\n        if (amount == 0) revert NothingToWithdraw();\\n\\n        IERC20(_token).transfer(_beneficiary, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x572b3ce53ddbb0e5d8649f415f6bd3ffc6364e698155f40920ed1468541fc05c\",\"license\":\"MIT\"},\"contracts/interfaces/IERC6551Registry.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IERC6551Registry {\\n    /**\\n     * @dev The registry MUST emit the ERC6551AccountCreated event upon successful account creation.\\n     */\\n    event ERC6551AccountCreated(\\n        address account,\\n        address indexed implementation,\\n        bytes32 salt,\\n        uint256 chainId,\\n        address indexed tokenContract,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev The registry MUST revert with AccountCreationFailed error if the create2 operation fails.\\n     */\\n    error AccountCreationFailed();\\n\\n    /**\\n     * @dev Creates a token bound account for a non-fungible token.\\n     *\\n     * If account has already been created, returns the account address without calling create2.\\n     *\\n     * Emits ERC6551AccountCreated event.\\n     *\\n     * @return account The address of the token bound account\\n     */\\n    function createAccount(\\n        address implementation,\\n        bytes32 salt,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId\\n    ) external returns (address account);\\n\\n    /**\\n     * @dev Returns the computed token bound account address for a non-fungible token.\\n     *\\n     * @return account The address of the token bound account\\n     */\\n    function account(\\n        address implementation,\\n        bytes32 salt,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId\\n    ) external view returns (address account);\\n}\\n\",\"keccak256\":\"0x08310acbf9e35623456827691da4d761b929611d073b4219eeb687c8bc468c6b\"},\"contracts/interfaces/ITokenAccess.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface ITokenAccess is IERC721 {\\n    function mint(address to, uint256 tokenId) external returns (bool);\\n}\\n\",\"keccak256\":\"0x453f4ad309a7e3116dbe18a8f55f55ccdacbc36ae754dd8de6fc9f3d1c444dd8\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620026023803806200260283398101604081905262000034916200021e565b858533806000846001600160a01b0381166200006b576040516335fdcccd60e21b8152600060048201526024015b60405180910390fd5b6001600160a01b039081166080528216620000c95760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f0000000000000000604482015260640162000062565b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000fc57620000fc816200015a565b5050600980546001600160a01b03199081166001600160a01b0394851617909155600a805482169884169890981790975550600b805487169582169590951790945550600c91909155600d8054909316911617905550620002a69050565b336001600160a01b03821603620001b45760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000062565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6001600160a01b03811681146200021b57600080fd5b50565b60008060008060008060c087890312156200023857600080fd5b8651620002458162000205565b6020880151909650620002588162000205565b60408801519095506200026b8162000205565b60608801519094506200027e8162000205565b608088015160a08901519194509250620002988162000205565b809150509295509295509295565b608051612339620002c960003960008181610481015261099601526123396000f3fe6080604052600436106101c65760003560e01c80637b103999116100f7578063b61d27f611610095578063eab5b02c11610064578063eab5b02c14610542578063eb9cf32214610562578063eea8236114610582578063f2fde38b1461059757600080fd5b8063b61d27f6146104c9578063bec0c86b146104f6578063bfa0b1331461050c578063db04fa491461052257600080fd5b806396d3b83d116100d157806396d3b83d1461043d5780639dca362f1461045d578063b0f479a114610472578063b5605b2e146104a557600080fd5b80637b103999146103df57806385572ffb146103ff5780638da5cb5b1461041f57600080fd5b80634030d521116101645780636159ada11161013e5780636159ada11461034a578063737643221461037a57806375c67c661461039a57806379ba5097146103ca57600080fd5b80634030d521146102da57806351cff8d91461030a57806355a373d61461032a57600080fd5b80631cdcf85a116101a05780631cdcf85a1461025f578063263596a5146102735780633aeac4e1146102985780633e1c97ae146102ba57600080fd5b806301ffc9a7146101d25780630b33e1cf1461020757806311464fbe1461023f57600080fd5b366101cd57005b600080fd5b3480156101de57600080fd5b506101f26101ed3660046116fa565b6105b7565b60405190151581526020015b60405180910390f35b34801561021357600080fd5b50600354610227906001600160a01b031681565b6040516001600160a01b0390911681526020016101fe565b34801561024b57600080fd5b50600b54610227906001600160a01b031681565b34801561026b57600080fd5b5060006101f2565b34801561027f57600080fd5b506102886105ee565b6040516101fe949392919061177b565b3480156102a457600080fd5b506102b86102b33660046117d5565b6106ad565b005b3480156102c657600080fd5b506102b86102d536600461180e565b6107bc565b3480156102e657600080fd5b506101f26102f5366004611869565b60076020526000908152604090205460ff1681565b34801561031657600080fd5b506102b8610325366004611886565b6107c9565b34801561033657600080fd5b50600d54610227906001600160a01b031681565b34801561035657600080fd5b506101f2610365366004611886565b60086020526000908152604090205460ff1681565b34801561038657600080fd5b506101f26103953660046119d3565b61088a565b3480156103a657600080fd5b506101f26103b5366004611869565b60066020526000908152604090205460ff1681565b3480156103d657600080fd5b506102b86108e1565b3480156103eb57600080fd5b50600a54610227906001600160a01b031681565b34801561040b57600080fd5b506102b861041a366004611a0f565b61098b565b34801561042b57600080fd5b506000546001600160a01b0316610227565b34801561044957600080fd5b506102b8610458366004611a57565b6109ea565b34801561046957600080fd5b50610227610a1d565b34801561047e57600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610227565b3480156104b157600080fd5b506104bb60025481565b6040519081526020016101fe565b3480156104d557600080fd5b506104e96104e4366004611a85565b610be4565b6040516101fe9190611add565b34801561050257600080fd5b506104bb60045481565b34801561051857600080fd5b506104bb600c5481565b34801561052e57600080fd5b506102b861053d366004611a57565b610c70565b34801561054e57600080fd5b506102b861055d366004611af0565b610ca3565b34801561056e57600080fd5b506102b861057d366004611b0e565b610cd6565b34801561058e57600080fd5b506104e9610d20565b3480156105a357600080fd5b506102b86105b2366004611886565b610dae565b60006001600160e01b031982166385572ffb60e01b14806105e857506001600160e01b031982166301ffc9a760e01b145b92915050565b600060606000806002546005600360009054906101000a90046001600160a01b031660045482805461061f90611b82565b80601f016020809104026020016040519081016040528092919081815260200182805461064b90611b82565b80156106985780601f1061066d57610100808354040283529160200191610698565b820191906000526020600020905b81548152906001019060200180831161067b57829003601f168201915b50505050509250935093509350935090919293565b6106b5610dbf565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156106fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107209190611bb6565b90508060000361074357604051630686827b60e51b815260040160405180910390fd5b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820183905283169063a9059cbb906044016020604051808303816000875af1158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b69190611bcf565b50505050565b6107c581610e14565b5050565b6107d1610dbf565b4760008190036107f457604051630686827b60e51b815260040160405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610841576040519150601f19603f3d011682016040523d82523d6000602084013e610846565b606091505b505090508061088557604051639d11f56360e01b81523360048201526001600160a01b0384166024820152604481018390526064015b60405180910390fd5b505050565b6000805b82518110156108d8578281815181106108a9576108a9611bec565b01602001516001600160f81b031916156108c65750600092915050565b806108d081611c02565b91505061088e565b50600192915050565b6001546001600160a01b031633146109345760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b604482015260640161087c565b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109d6576040516335fdcccd60e21b815233600482015260240161087c565b6109e76109e282611cd5565b611316565b50565b6109f2610dbf565b6001600160401b03919091166000908152600660205260409020805460ff1916911515919091179055565b6040516bffffffffffffffffffffffff193360601b166020820152466034820152600090819060540160408051808303601f19018152908290528051602090910120600d546340c10f1960e01b8352336004840152602483018290529092506000916001600160a01b03909116906340c10f19906044016020604051808303816000875af1158015610ab3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad79190611bcf565b905080610b265760405162461bcd60e51b815260206004820152601760248201527f4163636f756e74206372656174696f6e206661696c6564000000000000000000604482015260640161087c565b600a54600b54600c54600d54604051638a54c52f60e01b81526001600160a01b03938416600482015260248101929092524660448301528216606482015260848101859052911690638a54c52f9060a4016020604051808303816000875af1158015610b96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bba9190611d8c565b6001600160a01b0381166000908152600e60205260409020805460ff191660011790559392505050565b60606000846001600160a01b03168484604051610c019190611da9565b60006040518083038185875af1925050503d8060008114610c3e576040519150601f19603f3d011682016040523d82523d6000602084013e610c43565b606091505b509250905080610c685781604051630c3691ed60e41b815260040161087c9190611add565b509392505050565b610c78610dbf565b6001600160401b03919091166000908152600760205260409020805460ff1916911515919091179055565b610cab610dbf565b6001600160a01b03919091166000908152600860205260409020805460ff1916911515919091179055565b60005b8181101561088557610d0d838383818110610cf657610cf6611bec565b9050602002810190610d089190611dc5565b610e14565b5080610d1881611c02565b915050610cd9565b60058054610d2d90611b82565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5990611b82565b8015610da65780601f10610d7b57610100808354040283529160200191610da6565b820191906000526020600020905b815481529060010190602001808311610d8957829003601f168201915b505050505081565b610db6610dbf565b6109e7816114b3565b6000546001600160a01b03163314610e125760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b604482015260640161087c565b565b6000610e236020830183611869565b6000610e3761012085016101008601611886565b6001600160a01b03161480610e7057506009546001600160a01b0316610e6561012085016101008601611886565b6001600160a01b0316145b610ebc5760405162461bcd60e51b815260206004820152601760248201527f57726f6e672066656520746f6b656e2061646472657373000000000000000000604482015260640161087c565b6000610f10610ed16040860160208701611886565b610ede6040870187611ddc565b610eee60e0890160c08a01611886565b60e0890135610f056101208b016101008c01611886565b8a610120013561155c565b90506000306001600160a01b031663b0f479a16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f769190611d8c565b905060006001600160a01b0382166320487ded610f966020890189611869565b856040518363ffffffff1660e01b8152600401610fb4929190611e29565b602060405180830381865afa158015610fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff59190611bb6565b9050600061100b61012088016101008901611886565b6001600160a01b031660000361104c574782111561104557604051634787a10360e11b81524760048201526024810183905260440161087c565b50806111c8565b6009546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611094573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b89190611bb6565b82111561114f576009546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112b9190611bb6565b604051634787a10360e11b815260048101919091526024810183905260440161087c565b60095460405163095ea7b360e01b81526001600160a01b038581166004830152602482018590529091169063095ea7b3906044016020604051808303816000875af11580156111a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c69190611bcf565b505b6111d860e0880160c08901611886565b60405163095ea7b360e01b81526001600160a01b03858116600483015260e08a01356024830152919091169063095ea7b3906044016020604051808303816000875af115801561122c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112509190611bcf565b506001600160a01b0383166396f4e9f98261126e60208b018b611869565b876040518463ffffffff1660e01b815260040161128c929190611e29565b60206040518083038185885af11580156112aa573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906112cf9190611bb6565b9550857fed4e05800ee76a1cf5c649a0ec4133b0a0623d66d032e46129fb268501a631748884604051611303929190611f70565b60405180910390a2505050505b50919050565b806020015181604001518060200190518101906113339190611d8c565b6000836060015180602001905181019061134d91906120d6565b905061135c8160a0015161088a565b61137c576000611379826060015183608001518460a00151610be4565b50505b611389816040015161088a565b6113fe5780604001518060200190518101906113a591906120d6565b604051631f0e4bd760e11b81529091503090633e1c97ae906113cb9084906004016121e2565b600060405180830381600087803b1580156113e557600080fd5b505af11580156113f9573d6000803e3d6000fd5b505050505b83602001516001600160401b031684600001517fefd22b16d02120210ec8687e3528d040d94b6509ca1a54ecc33b9e6790abfe24866040015180602001905181019061144a9190611d8c565b8760600151886080015160008151811061146657611466611bec565b602002602001015160000151896080015160008151811061148957611489611bec565b6020026020010151602001516040516114a594939291906122cf565b60405180910390a350505050565b336001600160a01b0382160361150b5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640161087c565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6115976040518060a0016040528060608152602001606081526020016060815260200160006001600160a01b03168152602001606081525090565b604080516001808252818301909252600091816020015b60408051808201909152600080825260208201528152602001906001900390816115ae5790505090506040518060400160405280876001600160a01b03168152602001868152508160008151811061160857611608611bec565b60209081029190910101526040805160a081019091526001600160a01b038a1660c08201528060e08101604051602081830303815290604052815260200189898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093855250505060208083018590526001600160a01b038816604080850191909152805180820182528881528201928352805160248101899052925115156044808501919091528151808503909101815260649093019052810180516001600160e01b03166397a657c960e01b1790526060909101529998505050505050505050565b60006020828403121561170c57600080fd5b81356001600160e01b03198116811461172457600080fd5b9392505050565b60005b8381101561174657818101518382015260200161172e565b50506000910152565b6000815180845261176781602086016020860161172b565b601f01601f19169290920160200192915050565b848152608060208201526000611794608083018661174f565b6001600160a01b03949094166040830152506060015292915050565b6001600160a01b03811681146109e757600080fd5b80356117d0816117b0565b919050565b600080604083850312156117e857600080fd5b82356117f3816117b0565b91506020830135611803816117b0565b809150509250929050565b60006020828403121561182057600080fd5b81356001600160401b0381111561183657600080fd5b8201610140818503121561172457600080fd5b6001600160401b03811681146109e757600080fd5b80356117d081611849565b60006020828403121561187b57600080fd5b813561172481611849565b60006020828403121561189857600080fd5b8135611724816117b0565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156118db576118db6118a3565b60405290565b60405160a081016001600160401b03811182821017156118db576118db6118a3565b60405161014081016001600160401b03811182821017156118db576118db6118a3565b604051601f8201601f191681016001600160401b038111828210171561194e5761194e6118a3565b604052919050565b60006001600160401b0382111561196f5761196f6118a3565b50601f01601f191660200190565b600082601f83011261198e57600080fd5b81356119a161199c82611956565b611926565b8181528460208386010111156119b657600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156119e557600080fd5b81356001600160401b038111156119fb57600080fd5b611a078482850161197d565b949350505050565b600060208284031215611a2157600080fd5b81356001600160401b03811115611a3757600080fd5b820160a0818503121561172457600080fd5b80151581146109e757600080fd5b60008060408385031215611a6a57600080fd5b8235611a7581611849565b9150602083013561180381611a49565b600080600060608486031215611a9a57600080fd5b8335611aa5816117b0565b92506020840135915060408401356001600160401b03811115611ac757600080fd5b611ad38682870161197d565b9150509250925092565b602081526000611724602083018461174f565b60008060408385031215611b0357600080fd5b8235611a75816117b0565b60008060208385031215611b2157600080fd5b82356001600160401b0380821115611b3857600080fd5b818501915085601f830112611b4c57600080fd5b813581811115611b5b57600080fd5b8660208260051b8501011115611b7057600080fd5b60209290920196919550909350505050565b600181811c90821680611b9657607f821691505b60208210810361131057634e487b7160e01b600052602260045260246000fd5b600060208284031215611bc857600080fd5b5051919050565b600060208284031215611be157600080fd5b815161172481611a49565b634e487b7160e01b600052603260045260246000fd5b600060018201611c2257634e487b7160e01b600052601160045260246000fd5b5060010190565b600082601f830112611c3a57600080fd5b813560206001600160401b03821115611c5557611c556118a3565b611c63818360051b01611926565b82815260069290921b84018101918181019086841115611c8257600080fd5b8286015b84811015611cca5760408189031215611c9f5760008081fd5b611ca76118b9565b8135611cb2816117b0565b81528185013585820152835291830191604001611c86565b509695505050505050565b600060a08236031215611ce757600080fd5b611cef6118e1565b82358152611cff6020840161185e565b602082015260408301356001600160401b0380821115611d1e57600080fd5b611d2a3683870161197d565b60408401526060850135915080821115611d4357600080fd5b611d4f3683870161197d565b60608401526080850135915080821115611d6857600080fd5b50611d7536828601611c29565b60808301525092915050565b80516117d0816117b0565b600060208284031215611d9e57600080fd5b8151611724816117b0565b60008251611dbb81846020870161172b565b9190910192915050565b6000823561013e19833603018112611dbb57600080fd5b6000808335601e19843603018112611df357600080fd5b8301803591506001600160401b03821115611e0d57600080fd5b602001915036819003821315611e2257600080fd5b9250929050565b600060406001600160401b038516835260208181850152845160a083860152611e5560e086018261174f565b905081860151603f1980878403016060880152611e72838361174f565b88860151888203830160808a01528051808352908601945060009350908501905b80841015611ec557845180516001600160a01b0316835286015186830152938501936001939093019290860190611e93565b5060608901516001600160a01b031660a08901526080890151888203830160c08a01529550611ef4818761174f565b9a9950505050505050505050565b6000808335601e19843603018112611f1957600080fd5b83016020810192503590506001600160401b03811115611f3857600080fd5b803603821315611e2257600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60408152611f9160408201611f848561185e565b6001600160401b03169052565b6000611f9f602085016117c5565b6001600160a01b03166060830152611fba6040850185611f02565b610140806080860152611fd261018086018385611f47565b9250611fe0606088016117c5565b6001600160a01b03811660a08701529150608087013560c086015261200860a0880188611f02565b868503603f190160e08801529250612021848483611f47565b93505061203060c088016117c5565b9150610100612049818701846001600160a01b03169052565b610120925060e0880135838701526120628189016117c5565b6001600160a01b031691860191909152509490940135610160830152506020015290565b80516117d081611849565b600082601f8301126120a257600080fd5b81516120b061199c82611956565b8181528460208386010111156120c557600080fd5b611a0782602083016020870161172b565b6000602082840312156120e857600080fd5b81516001600160401b03808211156120ff57600080fd5b90830190610140828603121561211457600080fd5b61211c611903565b61212583612086565b815261213360208401611d81565b602082015260408301518281111561214a57600080fd5b61215687828601612091565b60408301525061216860608401611d81565b60608201526080830151608082015260a08301518281111561218957600080fd5b61219587828601612091565b60a0830152506121a760c08401611d81565b60c082015260e083015160e082015261010091506121c6828401611d81565b9181019190915261012091820151918101919091529392505050565b602081526121fc6020820183516001600160401b03169052565b6000602083015161221860408401826001600160a01b03169052565b50604083015161014080606085015261223561016085018361174f565b9150606085015161225160808601826001600160a01b03169052565b50608085015160a085015260a0850151601f198584030160c0860152612277838261174f565b92505060c085015161229460e08601826001600160a01b03169052565b5060e0850151610100858101919091528501516101206122be818701836001600160a01b03169052565b959095015193019290925250919050565b600060018060a01b038087168352608060208401526122f1608084018761174f565b9416604083015250606001529291505056fea2646970667358221220a77c5f89ac2c9404a371f5dfed7373078b69e84778f77e03eaf7115dcf832bed64736f6c63430008130033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowlistDestinationChain(uint64,bool)": {
        "details": "Updates the allowlist status of a destination chain for transactions.",
        "params": {
          "_destinationChainSelector": "The selector of the destination chain to be updated.",
          "allowed": "The allowlist status to be set for the destination chain."
        }
      },
      "allowlistSender(address,bool)": {
        "details": "Updates the allowlist status of a sender for transactions.",
        "params": {
          "_sender": "The address of the sender to be updated.",
          "allowed": "The allowlist status to be set for the sender."
        }
      },
      "allowlistSourceChain(uint64,bool)": {
        "details": "Updates the allowlist status of a source chain",
        "params": {
          "_sourceChainSelector": "The selector of the source chain to be updated.",
          "allowed": "The allowlist status to be set for the source chain."
        }
      },
      "ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
        "details": "Note ensure you check the msg.sender is the OffRampRouter",
        "params": {
          "message": "CCIP Message"
        }
      },
      "getLastReceivedMessageDetails()": {
        "details": "This function retrieves the ID, text, token address, and token amount of the last received CCIP message.",
        "returns": {
          "data": "The data of the last received CCIP message.",
          "messageId": "The ID of the last received CCIP message.",
          "tokenAddress": "The address of the token in the last CCIP received message.",
          "tokenAmount": "The amount of the token in the last CCIP received message."
        }
      },
      "getRouter()": {
        "returns": {
          "_0": "i_router address"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "The interfaceId to check"
        },
        "returns": {
          "_0": "true if the interfaceId is supported"
        }
      },
      "withdraw(address)": {
        "details": "This function reverts if there are no funds to withdraw or if the transfer fails. It should only be callable by the owner of the contract.",
        "params": {
          "_beneficiary": "The address to which the Ether should be sent."
        }
      },
      "withdrawToken(address,address)": {
        "details": "This function reverts with a 'NothingToWithdraw' error if there are no tokens to withdraw.",
        "params": {
          "_beneficiary": "The address to which the tokens will be sent.",
          "_token": "The contract address of the ERC20 token to be withdrawn."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ErrorInCall(bytes)": [
        {
          "notice": "fails when call is wrong."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "allowlistDestinationChain(uint64,bool)": {
        "notice": "This function can only be called by the owner."
      },
      "allowlistSender(address,bool)": {
        "notice": "This function can only be called by the owner."
      },
      "allowlistSourceChain(uint64,bool)": {
        "notice": "This function can only be called by the owner."
      },
      "ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
        "notice": "Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution."
      },
      "getLastReceivedMessageDetails()": {
        "notice": "Returns the details of the last CCIP received message."
      },
      "getRouter()": {
        "notice": "Return the current router"
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "supportsInterface(bytes4)": {
        "notice": "IERC165 supports an interfaceId"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address, pending."
      },
      "withdraw(address)": {
        "notice": "Allows the contract owner to withdraw the entire balance of Ether from the contract."
      },
      "withdrawToken(address,address)": {
        "notice": "Allows the owner of the contract to withdraw all tokens of a specific ERC20 token."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 27,
        "contract": "contracts/Transshipment.sol:Transshipment",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 29,
        "contract": "contracts/Transshipment.sol:Transshipment",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1247,
        "contract": "contracts/Transshipment.sol:Transshipment",
        "label": "s_lastReceivedMessageId",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 1249,
        "contract": "contracts/Transshipment.sol:Transshipment",
        "label": "s_lastReceivedTokenAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1251,
        "contract": "contracts/Transshipment.sol:Transshipment",
        "label": "s_lastReceivedTokenAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1253,
        "contract": "contracts/Transshipment.sol:Transshipment",
        "label": "s_lastReceivedData",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes_storage"
      },
      {
        "astId": 1257,
        "contract": "contracts/Transshipment.sol:Transshipment",
        "label": "allowlistedDestinationChains",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint64,t_bool)"
      },
      {
        "astId": 1261,
        "contract": "contracts/Transshipment.sol:Transshipment",
        "label": "allowlistedSourceChains",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint64,t_bool)"
      },
      {
        "astId": 1265,
        "contract": "contracts/Transshipment.sol:Transshipment",
        "label": "allowlistedSenders",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1268,
        "contract": "contracts/Transshipment.sol:Transshipment",
        "label": "s_linkToken",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IERC20)533"
      },
      {
        "astId": 689,
        "contract": "contracts/Transshipment.sol:Transshipment",
        "label": "registry",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC6551Registry)1612"
      },
      {
        "astId": 691,
        "contract": "contracts/Transshipment.sol:Transshipment",
        "label": "accountImplementation",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 693,
        "contract": "contracts/Transshipment.sol:Transshipment",
        "label": "salt",
        "offset": 0,
        "slot": "12",
        "type": "t_bytes32"
      },
      {
        "astId": 696,
        "contract": "contracts/Transshipment.sol:Transshipment",
        "label": "tokenContract",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(ITokenAccess)1628"
      },
      {
        "astId": 700,
        "contract": "contracts/Transshipment.sol:Transshipment",
        "label": "accounts",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)533": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC6551Registry)1612": {
        "encoding": "inplace",
        "label": "contract IERC6551Registry",
        "numberOfBytes": "20"
      },
      "t_contract(ITokenAccess)1628": {
        "encoding": "inplace",
        "label": "contract ITokenAccess",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint64,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}