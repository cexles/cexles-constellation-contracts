{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IAny2EVMMessageReceiver} from \"../interfaces/IAny2EVMMessageReceiver.sol\";\n\nimport {Client} from \"../libraries/Client.sol\";\n\nimport {IERC165} from \"../../vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol\";\n\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\nabstract contract CCIPReceiver is IAny2EVMMessageReceiver, IERC165 {\n  address internal immutable i_router;\n\n  constructor(address router) {\n    if (router == address(0)) revert InvalidRouter(address(0));\n    i_router = router;\n  }\n\n  /// @notice IERC165 supports an interfaceId\n  /// @param interfaceId The interfaceId to check\n  /// @return true if the interfaceId is supported\n  function supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\n    return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\n  }\n\n  /// @inheritdoc IAny2EVMMessageReceiver\n  function ccipReceive(Client.Any2EVMMessage calldata message) external virtual override onlyRouter {\n    _ccipReceive(message);\n  }\n\n  /// @notice Override this function in your implementation.\n  /// @param message Any2EVMMessage\n  function _ccipReceive(Client.Any2EVMMessage memory message) internal virtual;\n\n  /////////////////////////////////////////////////////////////////////\n  // Plumbing\n  /////////////////////////////////////////////////////////////////////\n\n  /// @notice Return the current router\n  /// @return i_router address\n  function getRouter() public view returns (address) {\n    return address(i_router);\n  }\n\n  error InvalidRouter(address router);\n\n  /// @dev only calls from the set router are accepted.\n  modifier onlyRouter() {\n    if (msg.sender != address(i_router)) revert InvalidRouter(msg.sender);\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Client} from \"../libraries/Client.sol\";\n\n/// @notice Application contracts that intend to receive messages from\n/// the router should implement this interface.\ninterface IAny2EVMMessageReceiver {\n  /// @notice Called by the Router to deliver a message.\n  /// If this reverts, any token transfers also revert. The message\n  /// will move to a FAILED state and become available for manual execution.\n  /// @param message CCIP Message\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\n  function ccipReceive(Client.Any2EVMMessage calldata message) external;\n}\n"
    },
    "@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Client} from \"../libraries/Client.sol\";\n\ninterface IRouterClient {\n  error UnsupportedDestinationChain(uint64 destChainSelector);\n  error InsufficientFeeTokenAmount();\n  error InvalidMsgValue();\n\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\n  /// @param chainSelector The chain to check.\n  /// @return supported is true if it is supported, false if not.\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\n\n  /// @notice Gets a list of all supported tokens which can be sent or received\n  /// to/from a given chain id.\n  /// @param chainSelector The chainSelector.\n  /// @return tokens The addresses of all tokens that are supported.\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\n\n  /// @param destinationChainSelector The destination chainSelector\n  /// @param message The cross-chain CCIP message including data and/or tokens\n  /// @return fee returns guaranteed execution fee for the specified message\n  /// delivery to destination chain\n  /// @dev returns 0 fee on invalid message.\n  function getFee(\n    uint64 destinationChainSelector,\n    Client.EVM2AnyMessage memory message\n  ) external view returns (uint256 fee);\n\n  /// @notice Request a message to be sent to the destination chain\n  /// @param destinationChainSelector The destination chain ID\n  /// @param message The cross-chain CCIP message including data and/or tokens\n  /// @return messageId The message ID\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\n  /// the overpayment with no refund.\n  function ccipSend(\n    uint64 destinationChainSelector,\n    Client.EVM2AnyMessage calldata message\n  ) external payable returns (bytes32);\n}\n"
    },
    "@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// End consumer library.\nlibrary Client {\n  struct EVMTokenAmount {\n    address token; // token address on the local chain.\n    uint256 amount; // Amount of tokens.\n  }\n\n  struct Any2EVMMessage {\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\n    uint64 sourceChainSelector; // Source chain selector.\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\n    bytes data; // payload sent in original message.\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\n  }\n\n  // If extraArgs is empty bytes, the default is 200k gas limit and strict = false.\n  struct EVM2AnyMessage {\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\n    bytes data; // Data payload\n    EVMTokenAmount[] tokenAmounts; // Token transfers\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\n  }\n\n  // extraArgs will evolve to support new features\n  // bytes4(keccak256(\"CCIP EVMExtraArgsV1\"));\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\n  struct EVMExtraArgsV1 {\n    uint256 gasLimit; // ATTENTION!!! MAX GAS LIMIT 4M FOR BETA TESTING\n    bool strict; // See strict sequencing details below.\n  }\n\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\n  }\n}\n"
    },
    "@chainlink/contracts-ccip/src/v0.8/ConfirmedOwner.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./ConfirmedOwnerWithProposal.sol\";\n\n/**\n * @title The ConfirmedOwner contract\n * @notice A contract with helpers for basic contract ownership.\n */\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\n}\n"
    },
    "@chainlink/contracts-ccip/src/v0.8/ConfirmedOwnerWithProposal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/OwnableInterface.sol\";\n\n/**\n * @title The ConfirmedOwner contract\n * @notice A contract with helpers for basic contract ownership.\n */\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\n  address private s_owner;\n  address private s_pendingOwner;\n\n  event OwnershipTransferRequested(address indexed from, address indexed to);\n  event OwnershipTransferred(address indexed from, address indexed to);\n\n  constructor(address newOwner, address pendingOwner) {\n    require(newOwner != address(0), \"Cannot set owner to zero\");\n\n    s_owner = newOwner;\n    if (pendingOwner != address(0)) {\n      _transferOwnership(pendingOwner);\n    }\n  }\n\n  /**\n   * @notice Allows an owner to begin transferring ownership to a new address,\n   * pending.\n   */\n  function transferOwnership(address to) public override onlyOwner {\n    _transferOwnership(to);\n  }\n\n  /**\n   * @notice Allows an ownership transfer to be completed by the recipient.\n   */\n  function acceptOwnership() external override {\n    require(msg.sender == s_pendingOwner, \"Must be proposed owner\");\n\n    address oldOwner = s_owner;\n    s_owner = msg.sender;\n    s_pendingOwner = address(0);\n\n    emit OwnershipTransferred(oldOwner, msg.sender);\n  }\n\n  /**\n   * @notice Get the current owner\n   */\n  function owner() public view override returns (address) {\n    return s_owner;\n  }\n\n  /**\n   * @notice validate, transfer ownership, and emit relevant events\n   */\n  function _transferOwnership(address to) private {\n    require(to != msg.sender, \"Cannot transfer to self\");\n\n    s_pendingOwner = to;\n\n    emit OwnershipTransferRequested(s_owner, to);\n  }\n\n  /**\n   * @notice validate access\n   */\n  function _validateOwnership() internal view {\n    require(msg.sender == s_owner, \"Only callable by owner\");\n  }\n\n  /**\n   * @notice Reverts if called by anyone other than the contract owner.\n   */\n  modifier onlyOwner() {\n    _validateOwnership();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts-ccip/src/v0.8/interfaces/OwnableInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface OwnableInterface {\n  function owner() external returns (address);\n\n  function transferOwnership(address recipient) external;\n\n  function acceptOwnership() external;\n}\n"
    },
    "@chainlink/contracts-ccip/src/v0.8/shared/access/OwnerIsCreator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ConfirmedOwner} from \"../../ConfirmedOwner.sol\";\n\n/// @title The OwnerIsCreator contract\n/// @notice A contract with helpers for basic contract ownership.\ncontract OwnerIsCreator is ConfirmedOwner {\n  constructor() ConfirmedOwner(msg.sender) {}\n}\n"
    },
    "@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  /**\n   * @dev Returns the amount of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the amount of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves `amount` tokens from the caller's account to `to`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address to, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(address owner, address spender) external view returns (uint256);\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Moves `amount` tokens from `from` to `to` using the\n   * allowance mechanism. `amount` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 amount\n  ) external returns (bool);\n}"
    },
    "@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n  /**\n    * @dev Returns true if this contract implements the interface defined by\n    * `interfaceId`. See the corresponding\n    * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n    * to learn more about how these ids are created.\n    *\n    * This function call must use less than 30 000 gas.\n    */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\nimport \"../../interfaces/IERC1271.sol\";\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n * Argent and Gnosis Safe.\n *\n * _Available since v4.1._\n */\nlibrary SignatureChecker {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\n        return\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\n            isValidERC1271SignatureNow(signer, hash, signature);\n    }\n\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\n     * against the signer smart contract using ERC1271.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidERC1271SignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\n        );\n        return (success &&\n            result.length >= 32 &&\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/Account.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport \"./ERC6551Account.sol\";\n\ncontract Account is ERC6551Account {}\n"
    },
    "contracts/CCIP/ProgrammableTokenTransfers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {IRouterClient} from \"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\";\nimport {OwnerIsCreator} from \"@chainlink/contracts-ccip/src/v0.8/shared/access/OwnerIsCreator.sol\";\nimport {Client} from \"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\";\nimport {CCIPReceiver} from \"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\";\nimport {IERC20} from \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol\";\n\n/**\n * THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY.\n * THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE.\n * DO NOT USE THIS CODE IN PRODUCTION.\n */\n\n/// @title - A simple messenger contract for transferring/receiving tokens and data across chains.\ncontract ProgrammableTokenTransfers is CCIPReceiver, OwnerIsCreator {\n    // Custom errors to provide more descriptive revert messages.\n    error NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees); // Used to make sure contract has enough balance to cover the fees.\n    error NothingToWithdraw(); // Used when trying to withdraw Ether but there's nothing to withdraw.\n    error FailedToWithdrawEth(address owner, address target, uint256 value); // Used when the withdrawal of Ether fails.\n    error DestinationChainNotAllowed(uint64 destinationChainSelector); // Used when the destination chain has not been allowlisted by the contract owner.\n    error SourceChainNotAllowed(uint64 sourceChainSelector); // Used when the source chain has not been allowlisted by the contract owner.\n    error SenderNotAllowed(address sender); // Used when the sender has not been allowlisted by the contract owner.\n\n    // Event emitted when a message is sent to another chain.\n    event MessageSent(\n        bytes32 indexed messageId, // The unique ID of the CCIP message.\n        uint64 indexed destinationChainSelector, // The chain selector of the destination chain.\n        address receiver, // The address of the receiver on the destination chain.\n        string text, // The text being sent.\n        address token, // The token address that was transferred.\n        uint256 tokenAmount, // The token amount that was transferred.\n        address feeToken, // the token address used to pay CCIP fees.\n        uint256 fees // The fees paid for sending the message.\n    );\n\n    // Event emitted when a message is received from another chain.\n    event MessageReceived(\n        bytes32 indexed messageId, // The unique ID of the CCIP message.\n        uint64 indexed sourceChainSelector, // The chain selector of the source chain.\n        address sender, // The address of the sender from the source chain.\n        string text, // The text that was received.\n        address token, // The token address that was transferred.\n        uint256 tokenAmount // The token amount that was transferred.\n    );\n\n    bytes32 private s_lastReceivedMessageId; // Store the last received messageId.\n    address private s_lastReceivedTokenAddress; // Store the last received token address.\n    uint256 private s_lastReceivedTokenAmount; // Store the last received amount.\n    string private s_lastReceivedText; // Store the last received text.\n\n    // Mapping to keep track of allowlisted destination chains.\n    mapping(uint64 => bool) public allowlistedDestinationChains;\n\n    // Mapping to keep track of allowlisted source chains.\n    mapping(uint64 => bool) public allowlistedSourceChains;\n\n    // Mapping to keep track of allowlisted senders.\n    mapping(address => bool) public allowlistedSenders;\n\n    IERC20 private s_linkToken;\n\n    /// @notice Constructor initializes the contract with the router address.\n    /// @param _router The address of the router contract.\n    /// @param _link The address of the link contract.\n    constructor(address _router, address _link) CCIPReceiver(_router) {\n        s_linkToken = IERC20(_link);\n    }\n\n    /// @dev Modifier that checks if the chain with the given destinationChainSelector is allowlisted.\n    /// @param _destinationChainSelector The selector of the destination chain.\n    modifier onlyAllowlistedDestinationChain(uint64 _destinationChainSelector) {\n        if (!allowlistedDestinationChains[_destinationChainSelector])\n            revert DestinationChainNotAllowed(_destinationChainSelector);\n        _;\n    }\n\n    /// @dev Modifier that checks if the chain with the given sourceChainSelector is allowlisted and if the sender is allowlisted.\n    /// @param _sourceChainSelector The selector of the destination chain.\n    /// @param _sender The address of the sender.\n    modifier onlyAllowlisted(uint64 _sourceChainSelector, address _sender) {\n        if (!allowlistedSourceChains[_sourceChainSelector]) revert SourceChainNotAllowed(_sourceChainSelector);\n        if (!allowlistedSenders[_sender]) revert SenderNotAllowed(_sender);\n        _;\n    }\n\n    /// @dev Updates the allowlist status of a destination chain for transactions.\n    /// @notice This function can only be called by the owner.\n    /// @param _destinationChainSelector The selector of the destination chain to be updated.\n    /// @param allowed The allowlist status to be set for the destination chain.\n    function allowlistDestinationChain(uint64 _destinationChainSelector, bool allowed) external onlyOwner {\n        allowlistedDestinationChains[_destinationChainSelector] = allowed;\n    }\n\n    /// @dev Updates the allowlist status of a source chain\n    /// @notice This function can only be called by the owner.\n    /// @param _sourceChainSelector The selector of the source chain to be updated.\n    /// @param allowed The allowlist status to be set for the source chain.\n    function allowlistSourceChain(uint64 _sourceChainSelector, bool allowed) external onlyOwner {\n        allowlistedSourceChains[_sourceChainSelector] = allowed;\n    }\n\n    /// @dev Updates the allowlist status of a sender for transactions.\n    /// @notice This function can only be called by the owner.\n    /// @param _sender The address of the sender to be updated.\n    /// @param allowed The allowlist status to be set for the sender.\n    function allowlistSender(address _sender, bool allowed) external onlyOwner {\n        allowlistedSenders[_sender] = allowed;\n    }\n\n    /// @notice Sends data and transfer tokens to receiver on the destination chain.\n    /// @notice Pay for fees in LINK.\n    /// @dev Assumes your contract has sufficient LINK to pay for CCIP fees.\n    /// @param _destinationChainSelector The identifier (aka selector) for the destination blockchain.\n    /// @param _receiver The address of the recipient on the destination blockchain.\n    /// @param _text The string data to be sent.\n    /// @param _token token address.\n    /// @param _amount token amount.\n    /// @return messageId The ID of the CCIP message that was sent.\n    function sendMessagePayLINK(\n        uint64 _destinationChainSelector,\n        address _receiver,\n        string calldata _text,\n        address _token,\n        uint256 _amount\n    ) external onlyOwner onlyAllowlistedDestinationChain(_destinationChainSelector) returns (bytes32 messageId) {\n        // Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\n        // address(linkToken) means fees are paid in LINK\n        Client.EVM2AnyMessage memory evm2AnyMessage = _buildCCIPMessage(\n            _receiver,\n            _text,\n            _token,\n            _amount,\n            address(s_linkToken)\n        );\n\n        // Initialize a router client instance to interact with cross-chain router\n        IRouterClient router = IRouterClient(this.getRouter());\n\n        // Get the fee required to send the CCIP message\n        uint256 fees = router.getFee(_destinationChainSelector, evm2AnyMessage);\n\n        if (fees > s_linkToken.balanceOf(address(this)))\n            revert NotEnoughBalance(s_linkToken.balanceOf(address(this)), fees);\n\n        // approve the Router to transfer LINK tokens on contract's behalf. It will spend the fees in LINK\n        s_linkToken.approve(address(router), fees);\n\n        // approve the Router to spend tokens on contract's behalf. It will spend the amount of the given token\n        IERC20(_token).approve(address(router), _amount);\n\n        // Send the message through the router and store the returned message ID\n        messageId = router.ccipSend(_destinationChainSelector, evm2AnyMessage);\n\n        // Emit an event with message details\n        emit MessageSent(\n            messageId,\n            _destinationChainSelector,\n            _receiver,\n            _text,\n            _token,\n            _amount,\n            address(s_linkToken),\n            fees\n        );\n\n        // Return the message ID\n        return messageId;\n    }\n\n    /// @notice Sends data and transfer tokens to receiver on the destination chain.\n    /// @notice Pay for fees in native gas.\n    /// @dev Assumes your contract has sufficient native gas like ETH on Ethereum or MATIC on Polygon.\n    /// @param _destinationChainSelector The identifier (aka selector) for the destination blockchain.\n    /// @param _receiver The address of the recipient on the destination blockchain.\n    /// @param _text The string data to be sent.\n    /// @param _token token address.\n    /// @param _amount token amount.\n    /// @return messageId The ID of the CCIP message that was sent.\n    function sendMessagePayNative(\n        uint64 _destinationChainSelector,\n        address _receiver,\n        string calldata _text,\n        address _token,\n        uint256 _amount\n    ) external onlyOwner onlyAllowlistedDestinationChain(_destinationChainSelector) returns (bytes32 messageId) {\n        // Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\n        // address(0) means fees are paid in native gas\n        Client.EVM2AnyMessage memory evm2AnyMessage = _buildCCIPMessage(_receiver, _text, _token, _amount, address(0));\n\n        // Initialize a router client instance to interact with cross-chain router\n        IRouterClient router = IRouterClient(this.getRouter());\n\n        // Get the fee required to send the CCIP message\n        uint256 fees = router.getFee(_destinationChainSelector, evm2AnyMessage);\n\n        if (fees > address(this).balance) revert NotEnoughBalance(address(this).balance, fees);\n\n        // approve the Router to spend tokens on contract's behalf. It will spend the amount of the given token\n        IERC20(_token).approve(address(router), _amount);\n\n        // Send the message through the router and store the returned message ID\n        messageId = router.ccipSend{value: fees}(_destinationChainSelector, evm2AnyMessage);\n\n        // Emit an event with message details\n        emit MessageSent(messageId, _destinationChainSelector, _receiver, _text, _token, _amount, address(0), fees);\n\n        // Return the message ID\n        return messageId;\n    }\n\n    /**\n     * @notice Returns the details of the last CCIP received message.\n     * @dev This function retrieves the ID, text, token address, and token amount of the last received CCIP message.\n     * @return messageId The ID of the last received CCIP message.\n     * @return text The text of the last received CCIP message.\n     * @return tokenAddress The address of the token in the last CCIP received message.\n     * @return tokenAmount The amount of the token in the last CCIP received message.\n     */\n    function getLastReceivedMessageDetails()\n        public\n        view\n        returns (bytes32 messageId, string memory text, address tokenAddress, uint256 tokenAmount)\n    {\n        return (s_lastReceivedMessageId, s_lastReceivedText, s_lastReceivedTokenAddress, s_lastReceivedTokenAmount);\n    }\n\n    /// handle a received message\n    function _ccipReceive(\n        Client.Any2EVMMessage memory any2EvmMessage\n    )\n        internal\n        override\n        onlyAllowlisted(any2EvmMessage.sourceChainSelector, abi.decode(any2EvmMessage.sender, (address))) // Make sure source chain and sender are allowlisted\n    {\n        s_lastReceivedMessageId = any2EvmMessage.messageId; // fetch the messageId\n        s_lastReceivedText = abi.decode(any2EvmMessage.data, (string)); // abi-decoding of the sent text\n        // Expect one token to be transferred at once, but you can transfer several tokens.\n        s_lastReceivedTokenAddress = any2EvmMessage.destTokenAmounts[0].token;\n        s_lastReceivedTokenAmount = any2EvmMessage.destTokenAmounts[0].amount;\n\n        emit MessageReceived(\n            any2EvmMessage.messageId,\n            any2EvmMessage.sourceChainSelector, // fetch the source chain identifier (aka selector)\n            abi.decode(any2EvmMessage.sender, (address)), // abi-decoding of the sender address,\n            abi.decode(any2EvmMessage.data, (string)),\n            any2EvmMessage.destTokenAmounts[0].token,\n            any2EvmMessage.destTokenAmounts[0].amount\n        );\n    }\n\n    /// @notice Construct a CCIP message.\n    /// @dev This function will create an EVM2AnyMessage struct with all the necessary information for programmable tokens transfer.\n    /// @param _receiver The address of the receiver.\n    /// @param _text The string data to be sent.\n    /// @param _token The token to be transferred.\n    /// @param _amount The amount of the token to be transferred.\n    /// @param _feeTokenAddress The address of the token used for fees. Set address(0) for native gas.\n    /// @return Client.EVM2AnyMessage Returns an EVM2AnyMessage struct which contains information for sending a CCIP message.\n    function _buildCCIPMessage(\n        address _receiver,\n        string calldata _text,\n        address _token,\n        uint256 _amount,\n        address _feeTokenAddress\n    ) internal pure returns (Client.EVM2AnyMessage memory) {\n        // Set the token amounts\n        Client.EVMTokenAmount[] memory tokenAmounts = new Client.EVMTokenAmount[](1);\n        tokenAmounts[0] = Client.EVMTokenAmount({token: _token, amount: _amount});\n        // Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\n        return\n            Client.EVM2AnyMessage({\n                receiver: abi.encode(_receiver), // ABI-encoded receiver address\n                data: abi.encode(_text), // ABI-encoded string\n                tokenAmounts: tokenAmounts, // The amount and type of token being transferred\n                extraArgs: Client._argsToBytes(\n                    // Additional arguments, setting gas limit and non-strict sequencing mode\n                    Client.EVMExtraArgsV1({gasLimit: 200_000, strict: false})\n                ),\n                // Set the feeToken to a feeTokenAddress, indicating specific asset will be used for fees\n                feeToken: _feeTokenAddress\n            });\n    }\n\n    /// @notice Fallback function to allow the contract to receive Ether.\n    /// @dev This function has no function body, making it a default function for receiving Ether.\n    /// It is automatically called when Ether is sent to the contract without any data.\n    receive() external payable {}\n\n    /// @notice Allows the contract owner to withdraw the entire balance of Ether from the contract.\n    /// @dev This function reverts if there are no funds to withdraw or if the transfer fails.\n    /// It should only be callable by the owner of the contract.\n    /// @param _beneficiary The address to which the Ether should be sent.\n    function withdraw(address _beneficiary) public onlyOwner {\n        // Retrieve the balance of this contract\n        uint256 amount = address(this).balance;\n\n        // Revert if there is nothing to withdraw\n        if (amount == 0) revert NothingToWithdraw();\n\n        // Attempt to send the funds, capturing the success status and discarding any return data\n        (bool sent, ) = _beneficiary.call{value: amount}(\"\");\n\n        // Revert if the send failed, with information about the attempted transfer\n        if (!sent) revert FailedToWithdrawEth(msg.sender, _beneficiary, amount);\n    }\n\n    /// @notice Allows the owner of the contract to withdraw all tokens of a specific ERC20 token.\n    /// @dev This function reverts with a 'NothingToWithdraw' error if there are no tokens to withdraw.\n    /// @param _beneficiary The address to which the tokens will be sent.\n    /// @param _token The contract address of the ERC20 token to be withdrawn.\n    function withdrawToken(address _beneficiary, address _token) public onlyOwner {\n        // Retrieve the balance of this contract\n        uint256 amount = IERC20(_token).balanceOf(address(this));\n\n        // Revert if there is nothing to withdraw\n        if (amount == 0) revert NothingToWithdraw();\n\n        IERC20(_token).transfer(_beneficiary, amount);\n    }\n}\n"
    },
    "contracts/CCIP/TokenTransferor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {IRouterClient} from \"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\";\nimport {OwnerIsCreator} from \"@chainlink/contracts-ccip/src/v0.8/shared/access/OwnerIsCreator.sol\";\nimport {Client} from \"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\";\nimport {IERC20} from \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol\";\n\n/**\n * THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY.\n * THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE.\n * DO NOT USE THIS CODE IN PRODUCTION.\n */\n\n/// @title - A simple contract for transferring tokens across chains.\ncontract TokenTransferor is OwnerIsCreator {\n    // Custom errors to provide more descriptive revert messages.\n    error NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees); // Used to make sure contract has enough balance to cover the fees.\n    error NothingToWithdraw(); // Used when trying to withdraw Ether but there's nothing to withdraw.\n    error FailedToWithdrawEth(address owner, address target, uint256 value); // Used when the withdrawal of Ether fails.\n    error DestinationChainNotAllowlisted(uint64 destinationChainSelector); // Used when the destination chain has not been allowlisted by the contract owner.\n    // Event emitted when the tokens are transferred to an account on another chain.\n    event TokensTransferred(\n        bytes32 indexed messageId, // The unique ID of the message.\n        uint64 indexed destinationChainSelector, // The chain selector of the destination chain.\n        address receiver, // The address of the receiver on the destination chain.\n        address token, // The token address that was transferred.\n        uint256 tokenAmount, // The token amount that was transferred.\n        address feeToken, // the token address used to pay CCIP fees.\n        uint256 fees // The fees paid for sending the message.\n    );\n\n    // Mapping to keep track of allowlisted destination chains.\n    mapping(uint64 => bool) public allowlistedChains;\n\n    IRouterClient private s_router;\n\n    IERC20 private s_linkToken;\n\n    /// @notice Constructor initializes the contract with the router address.\n    /// @param _router The address of the router contract.\n    /// @param _link The address of the link contract.\n    constructor(address _router, address _link) {\n        s_router = IRouterClient(_router);\n        s_linkToken = IERC20(_link);\n    }\n\n    /// @dev Modifier that checks if the chain with the given destinationChainSelector is allowlisted.\n    /// @param _destinationChainSelector The selector of the destination chain.\n    modifier onlyAllowlistedChain(uint64 _destinationChainSelector) {\n        if (!allowlistedChains[_destinationChainSelector])\n            revert DestinationChainNotAllowlisted(_destinationChainSelector);\n        _;\n    }\n\n    /// @dev Updates the allowlist status of a destination chain for transactions.\n    /// @notice This function can only be called by the owner.\n    /// @param _destinationChainSelector The selector of the destination chain to be updated.\n    /// @param allowed The allowlist status to be set for the destination chain.\n    function allowlistDestinationChain(uint64 _destinationChainSelector, bool allowed) external onlyOwner {\n        allowlistedChains[_destinationChainSelector] = allowed;\n    }\n\n    /// @notice Transfer tokens to receiver on the destination chain.\n    /// @notice pay in LINK.\n    /// @notice the token must be in the list of supported tokens.\n    /// @notice This function can only be called by the owner.\n    /// @dev Assumes your contract has sufficient LINK tokens to pay for the fees.\n    /// @param _destinationChainSelector The identifier (aka selector) for the destination blockchain.\n    /// @param _receiver The address of the recipient on the destination blockchain.\n    /// @param _token token address.\n    /// @param _amount token amount.\n    /// @return messageId The ID of the message that was sent.\n    function transferTokensPayLINK(\n        uint64 _destinationChainSelector,\n        address _receiver,\n        address _token,\n        uint256 _amount\n    ) external onlyOwner onlyAllowlistedChain(_destinationChainSelector) returns (bytes32 messageId) {\n        // Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\n        //  address(linkToken) means fees are paid in LINK\n        Client.EVM2AnyMessage memory evm2AnyMessage = _buildCCIPMessage(\n            _receiver,\n            _token,\n            _amount,\n            address(s_linkToken)\n        );\n\n        // Get the fee required to send the message\n        uint256 fees = s_router.getFee(_destinationChainSelector, evm2AnyMessage);\n\n        if (fees > s_linkToken.balanceOf(address(this)))\n            revert NotEnoughBalance(s_linkToken.balanceOf(address(this)), fees);\n\n        // approve the Router to transfer LINK tokens on contract's behalf. It will spend the fees in LINK\n        s_linkToken.approve(address(s_router), fees);\n\n        // approve the Router to spend tokens on contract's behalf. It will spend the amount of the given token\n        IERC20(_token).approve(address(s_router), _amount);\n\n        // Send the message through the router and store the returned message ID\n        messageId = s_router.ccipSend(_destinationChainSelector, evm2AnyMessage);\n\n        // Emit an event with message details\n        emit TokensTransferred(\n            messageId,\n            _destinationChainSelector,\n            _receiver,\n            _token,\n            _amount,\n            address(s_linkToken),\n            fees\n        );\n\n        // Return the message ID\n        return messageId;\n    }\n\n    /// @notice Transfer tokens to receiver on the destination chain.\n    /// @notice Pay in native gas such as ETH on Ethereum or MATIC on Polgon.\n    /// @notice the token must be in the list of supported tokens.\n    /// @notice This function can only be called by the owner.\n    /// @dev Assumes your contract has sufficient native gas like ETH on Ethereum or MATIC on Polygon.\n    /// @param _destinationChainSelector The identifier (aka selector) for the destination blockchain.\n    /// @param _receiver The address of the recipient on the destination blockchain.\n    /// @param _token token address.\n    /// @param _amount token amount.\n    /// @return messageId The ID of the message that was sent.\n    function transferTokensPayNative(\n        uint64 _destinationChainSelector,\n        address _receiver,\n        address _token,\n        uint256 _amount\n    ) external onlyOwner onlyAllowlistedChain(_destinationChainSelector) returns (bytes32 messageId) {\n        // Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\n        // address(0) means fees are paid in native gas\n        Client.EVM2AnyMessage memory evm2AnyMessage = _buildCCIPMessage(_receiver, _token, _amount, address(0));\n\n        // Get the fee required to send the message\n        uint256 fees = s_router.getFee(_destinationChainSelector, evm2AnyMessage);\n\n        if (fees > address(this).balance) revert NotEnoughBalance(address(this).balance, fees);\n\n        // approve the Router to spend tokens on contract's behalf. It will spend the amount of the given token\n        IERC20(_token).approve(address(s_router), _amount);\n\n        // Send the message through the router and store the returned message ID\n        messageId = s_router.ccipSend{value: fees}(_destinationChainSelector, evm2AnyMessage);\n\n        // Emit an event with message details\n        emit TokensTransferred(messageId, _destinationChainSelector, _receiver, _token, _amount, address(0), fees);\n\n        // Return the message ID\n        return messageId;\n    }\n\n    /// @notice Construct a CCIP message.\n    /// @dev This function will create an EVM2AnyMessage struct with all the necessary information for tokens transfer.\n    /// @param _receiver The address of the receiver.\n    /// @param _token The token to be transferred.\n    /// @param _amount The amount of the token to be transferred.\n    /// @param _feeTokenAddress The address of the token used for fees. Set address(0) for native gas.\n    /// @return Client.EVM2AnyMessage Returns an EVM2AnyMessage struct which contains information for sending a CCIP message.\n    function _buildCCIPMessage(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        address _feeTokenAddress\n    ) internal pure returns (Client.EVM2AnyMessage memory) {\n        // Set the token amounts\n        Client.EVMTokenAmount[] memory tokenAmounts = new Client.EVMTokenAmount[](1);\n        tokenAmounts[0] = Client.EVMTokenAmount({token: _token, amount: _amount});\n\n        // Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\n        return\n            Client.EVM2AnyMessage({\n                receiver: abi.encode(_receiver), // ABI-encoded receiver address\n                data: \"\", // No data\n                tokenAmounts: tokenAmounts, // The amount and type of token being transferred\n                extraArgs: Client._argsToBytes(\n                    // Additional arguments, setting gas limit to 0 as we are not sending any data and non-strict sequencing mode\n                    Client.EVMExtraArgsV1({gasLimit: 0, strict: false})\n                ),\n                // Set the feeToken to a feeTokenAddress, indicating specific asset will be used for fees\n                feeToken: _feeTokenAddress\n            });\n    }\n\n    /// @notice Fallback function to allow the contract to receive Ether.\n    /// @dev This function has no function body, making it a default function for receiving Ether.\n    /// It is automatically called when Ether is transferred to the contract without any data.\n    receive() external payable {}\n\n    /// @notice Allows the contract owner to withdraw the entire balance of Ether from the contract.\n    /// @dev This function reverts if there are no funds to withdraw or if the transfer fails.\n    /// It should only be callable by the owner of the contract.\n    /// @param _beneficiary The address to which the Ether should be transferred.\n    function withdraw(address _beneficiary) public onlyOwner {\n        // Retrieve the balance of this contract\n        uint256 amount = address(this).balance;\n\n        // Revert if there is nothing to withdraw\n        if (amount == 0) revert NothingToWithdraw();\n\n        // Attempt to send the funds, capturing the success status and discarding any return data\n        (bool sent, ) = _beneficiary.call{value: amount}(\"\");\n\n        // Revert if the send failed, with information about the attempted transfer\n        if (!sent) revert FailedToWithdrawEth(msg.sender, _beneficiary, amount);\n    }\n\n    /// @notice Allows the owner of the contract to withdraw all tokens of a specific ERC20 token.\n    /// @dev This function reverts with a 'NothingToWithdraw' error if there are no tokens to withdraw.\n    /// @param _beneficiary The address to which the tokens will be sent.\n    /// @param _token The contract address of the ERC20 token to be withdrawn.\n    function withdrawToken(address _beneficiary, address _token) public onlyOwner {\n        // Retrieve the balance of this contract\n        uint256 amount = IERC20(_token).balanceOf(address(this));\n\n        // Revert if there is nothing to withdraw\n        if (amount == 0) revert NothingToWithdraw();\n\n        IERC20(_token).transfer(_beneficiary, amount);\n    }\n}\n"
    },
    "contracts/ERC6551Account.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC1271.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\";\n\ninterface IERC6551Account {\n    receive() external payable;\n\n    function token() external view returns (uint256 chainId, address tokenContract, uint256 tokenId);\n\n    function state() external view returns (uint256);\n\n    function isValidSigner(address signer, bytes calldata context) external view returns (bytes4 magicValue);\n}\n\ninterface IERC6551Executable {\n    function execute(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        uint8 operation\n    ) external payable returns (bytes memory);\n}\n\ncontract ERC6551Account is IERC165, IERC1271, IERC6551Account, IERC6551Executable {\n    uint256 public state;\n\n    receive() external payable {}\n\n    function execute(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        uint8 operation\n    ) external payable virtual returns (bytes memory result) {\n        require(_isValidSigner(msg.sender), \"Invalid signer\");\n        require(operation == 0, \"Only call operations are supported\");\n\n        ++state;\n\n        bool success;\n        (success, result) = to.call{value: value}(data);\n\n        if (!success) {\n            assembly {\n                revert(add(result, 32), mload(result))\n            }\n        }\n    }\n\n    function isValidSigner(address signer, bytes calldata) external view virtual returns (bytes4) {\n        if (_isValidSigner(signer)) {\n            return IERC6551Account.isValidSigner.selector;\n        }\n\n        return bytes4(0);\n    }\n\n    function isValidSignature(bytes32 hash, bytes memory signature) external view virtual returns (bytes4 magicValue) {\n        bool isValid = SignatureChecker.isValidSignatureNow(owner(), hash, signature);\n\n        if (isValid) {\n            return IERC1271.isValidSignature.selector;\n        }\n\n        return bytes4(0);\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return\n            interfaceId == type(IERC165).interfaceId ||\n            interfaceId == type(IERC6551Account).interfaceId ||\n            interfaceId == type(IERC6551Executable).interfaceId;\n    }\n\n    function token() public view virtual returns (uint256, address, uint256) {\n        bytes memory footer = new bytes(0x60);\n\n        assembly {\n            extcodecopy(address(), add(footer, 0x20), 0x4d, 0x60)\n        }\n\n        return abi.decode(footer, (uint256, address, uint256));\n    }\n\n    function owner() public view virtual returns (address) {\n        (uint256 chainId, address tokenContract, uint256 tokenId) = token();\n        if (chainId != block.chainid) return address(0);\n\n        return IERC721(tokenContract).ownerOf(tokenId);\n    }\n\n    function _isValidSigner(address signer) internal view virtual returns (bool) {\n        return signer == owner();\n    }\n}\n"
    },
    "contracts/interfaces/IERC6551Registry.sol": {
      "content": "pragma solidity 0.8.19;\n\ninterface IERC6551Registry {\n    /**\n     * @dev The registry MUST emit the ERC6551AccountCreated event upon successful account creation.\n     */\n    event ERC6551AccountCreated(\n        address account,\n        address indexed implementation,\n        bytes32 salt,\n        uint256 chainId,\n        address indexed tokenContract,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev The registry MUST revert with AccountCreationFailed error if the create2 operation fails.\n     */\n    error AccountCreationFailed();\n\n    /**\n     * @dev Creates a token bound account for a non-fungible token.\n     *\n     * If account has already been created, returns the account address without calling create2.\n     *\n     * Emits ERC6551AccountCreated event.\n     *\n     * @return account The address of the token bound account\n     */\n    function createAccount(\n        address implementation,\n        bytes32 salt,\n        uint256 chainId,\n        address tokenContract,\n        uint256 tokenId\n    ) external returns (address account);\n\n    /**\n     * @dev Returns the computed token bound account address for a non-fungible token.\n     *\n     * @return account The address of the token bound account\n     */\n    function account(\n        address implementation,\n        bytes32 salt,\n        uint256 chainId,\n        address tokenContract,\n        uint256 tokenId\n    ) external view returns (address account);\n}\n"
    },
    "contracts/interfaces/ITokenAccess.sol": {
      "content": "pragma solidity 0.8.19;\n\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface ITokenAccess is IERC721 {\n    function mint(address to, uint256 tokenId) external returns (bool);\n}\n"
    },
    "contracts/Transshipment.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {TransshipmentWorker, Client, IRouterClient, IERC20} from \"./TransshipmentWorker.sol\";\nimport {IERC6551Registry} from \"./interfaces/IERC6551Registry.sol\";\nimport {ITokenAccess} from \"./interfaces/ITokenAccess.sol\";\n\ncontract Transshipment is TransshipmentWorker {\n    IERC6551Registry public registry;\n    address public accountImplementation;\n    bytes32 public salt;\n    ITokenAccess public tokenContract;\n\n    // mapping(address => uint256) public nonces;\n\n    constructor(\n        address _router,\n        address _link,\n        IERC6551Registry _registry,\n        address _accountImplementation,\n        bytes32 _salt,\n        ITokenAccess _tokenContract\n    ) TransshipmentWorker(_router, _link) {\n        registry = _registry;\n        accountImplementation = _accountImplementation;\n        salt = _salt;\n        tokenContract = _tokenContract;\n    }\n\n    function createAccount() external returns (address) {\n        // Every one can have only one account! All communicate with help of rootAccount!\n        uint256 tokenId = uint256(keccak256(abi.encodePacked(msg.sender, block.chainid)));\n        bool success = tokenContract.mint(msg.sender, tokenId);\n        require(success, \"Account creation failed\");\n        return registry.createAccount(accountImplementation, salt, block.chainid, address(tokenContract), tokenId);\n    }\n\n    function sendUniversalMassage(MassageParam[] calldata massageParams) external {\n        for (uint256 i = 0; i < massageParams.length; i++) {\n            _sendMessage(massageParams[i]);\n        }\n    }\n\n    function _sendMessage(\n        MassageParam calldata massageParam\n    )\n        internal\n        override\n        onlyAllowlistedDestinationChain(massageParam.destinationChainSelector)\n        returns (bytes32 messageId)\n    {\n        require(\n            massageParam.feeToken == address(0) || massageParam.feeToken == address(s_linkToken),\n            \"Wrong fee token address\"\n        );\n        // Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\n        Client.EVM2AnyMessage memory evm2AnyMessage = _buildCCIPMessage(\n            massageParam.receiver,\n            massageParam.dataToSend,\n            massageParam.token,\n            massageParam.amount,\n            massageParam.feeToken,\n            massageParam.gasLimit\n        );\n        // TODO: EXECUTE when get massage massageParam.dataToExecute\n        // Initialize a router client instance to interact with cross-chain router\n        IRouterClient router = IRouterClient(this.getRouter());\n        // Get the fee required to send the CCIP message\n        uint256 fees = router.getFee(massageParam.destinationChainSelector, evm2AnyMessage);\n        uint256 nativeFees = 0;\n        if (address(0) == massageParam.feeToken) {\n            if (fees > address(this).balance) revert NotEnoughBalance(address(this).balance, fees);\n            nativeFees = fees;\n        } else {\n            if (fees > s_linkToken.balanceOf(address(this)))\n                revert NotEnoughBalance(s_linkToken.balanceOf(address(this)), fees);\n            // approve the Router to transfer LINK tokens on contract's behalf. It will spend the fees in LINK\n            s_linkToken.approve(address(router), fees);\n        }\n        // approve the Router to spend tokens on contract's behalf. It will spend the amount of the given token\n        IERC20(massageParam.token).approve(address(router), massageParam.amount);\n        // Send the message through the router and store the returned message ID\n        messageId = router.ccipSend{value: nativeFees}(massageParam.destinationChainSelector, evm2AnyMessage);\n        // Emit an event with message details\n        emit MessageSent(\n            messageId,\n            massageParam.destinationChainSelector,\n            massageParam.receiver,\n            massageParam.dataToSend,\n            massageParam.token,\n            massageParam.amount,\n            massageParam.feeToken,\n            fees\n        );\n        // Return the message ID\n        return messageId;\n    }\n\n    function _ccipReceive(\n        Client.Any2EVMMessage memory any2EvmMessage\n    )\n        internal\n        virtual\n        override\n        onlyAllowlisted(any2EvmMessage.sourceChainSelector, abi.decode(any2EvmMessage.sender, (address)))\n    {\n        // TODO: add check userId with srcChain\n\n        s_lastReceivedMessageId = any2EvmMessage.messageId; // fetch the messageId\n        s_lastReceivedData = any2EvmMessage.data; // abi-decoding of the sent text\n        // Expect one token to be transferred at once, but you can transfer several tokens.\n        s_lastReceivedTokenAddress = any2EvmMessage.destTokenAmounts[0].token;\n        s_lastReceivedTokenAmount = any2EvmMessage.destTokenAmounts[0].amount;\n\n        emit MessageReceived(\n            any2EvmMessage.messageId,\n            any2EvmMessage.sourceChainSelector, // fetch the source chain identifier (aka selector)\n            abi.decode(any2EvmMessage.sender, (address)), // abi-decoding of the sender address,\n            any2EvmMessage.data,\n            any2EvmMessage.destTokenAmounts[0].token,\n            any2EvmMessage.destTokenAmounts[0].amount\n        );\n    }\n\n    function multicall() external returns (bool) {} // And this contract will be multicallForwarder\n}\n"
    },
    "contracts/TransshipmentWorker.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {IRouterClient} from \"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\";\nimport {OwnerIsCreator} from \"@chainlink/contracts-ccip/src/v0.8/shared/access/OwnerIsCreator.sol\";\nimport {Client} from \"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\";\nimport {CCIPReceiver} from \"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\";\nimport {IERC20} from \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol\";\n\n/// @title - A simple messenger contract for transferring/receiving tokens and data across chains.\nabstract contract TransshipmentWorker is CCIPReceiver, OwnerIsCreator {\n    // Custom errors to provide more descriptive revert messages.\n    error NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees); // Used to make sure contract has enough balance to cover the fees.\n    error NothingToWithdraw(); // Used when trying to withdraw Ether but there's nothing to withdraw.\n    error FailedToWithdrawEth(address owner, address target, uint256 value); // Used when the withdrawal of Ether fails.\n    error DestinationChainNotAllowed(uint64 destinationChainSelector); // Used when the destination chain has not been allowlisted by the contract owner.\n    error SourceChainNotAllowed(uint64 sourceChainSelector); // Used when the source chain has not been allowlisted by the contract owner.\n    error SenderNotAllowed(address sender); // Used when the sender has not been allowlisted by the contract owner.\n\n    // Event emitted when a message is sent to another chain.\n    event MessageSent(\n        bytes32 indexed messageId, // The unique ID of the CCIP message.\n        uint64 indexed destinationChainSelector, // The chain selector of the destination chain.\n        address receiver, // The address of the receiver on the destination chain.\n        bytes data, // The data being sent.\n        address token, // The token address that was transferred.\n        uint256 tokenAmount, // The token amount that was transferred.\n        address feeToken, // the token address used to pay CCIP fees.\n        uint256 fees // The fees paid for sending the message.\n    );\n\n    // Event emitted when a message is received from another chain.\n    event MessageReceived(\n        bytes32 indexed messageId, // The unique ID of the CCIP message.\n        uint64 indexed sourceChainSelector, // The chain selector of the source chain.\n        address sender, // The address of the sender from the source chain.\n        bytes text, // The text that was received.\n        address token, // The token address that was transferred.\n        uint256 tokenAmount // The token amount that was transferred.\n    );\n\n    bytes32 public s_lastReceivedMessageId; // Store the last received messageId.\n    address public s_lastReceivedTokenAddress; // Store the last received token address.\n    uint256 public s_lastReceivedTokenAmount; // Store the last received amount.\n    bytes public s_lastReceivedData; // Store the last received text.\n\n    // Mapping to keep track of allowlisted destination chains.\n    mapping(uint64 => bool) public allowlistedDestinationChains;\n\n    // Mapping to keep track of allowlisted source chains.\n    mapping(uint64 => bool) public allowlistedSourceChains;\n\n    // Mapping to keep track of allowlisted senders.\n    mapping(address => bool) public allowlistedSenders;\n\n    IERC20 internal s_linkToken;\n\n    /// @notice Constructor initializes the contract with the router address.\n    /// @param _router The address of the router contract.\n    /// @param _link The address of the link contract.\n    constructor(address _router, address _link) CCIPReceiver(_router) {\n        s_linkToken = IERC20(_link);\n    }\n\n    /// @dev Modifier that checks if the chain with the given destinationChainSelector is allowlisted.\n    /// @param _destinationChainSelector The selector of the destination chain.\n    modifier onlyAllowlistedDestinationChain(uint64 _destinationChainSelector) {\n        // TODO: add checks\n        // if (!allowlistedDestinationChains[_destinationChainSelector])\n        //     revert DestinationChainNotAllowed(_destinationChainSelector);\n        _;\n    }\n\n    /// @dev Modifier that checks if the chain with the given sourceChainSelector is allowlisted and if the sender is allowlisted.\n    /// @param _sourceChainSelector The selector of the destination chain.\n    /// @param _sender The address of the sender.\n    modifier onlyAllowlisted(uint64 _sourceChainSelector, address _sender) {\n        // TODO: add checks\n        // if (!allowlistedSourceChains[_sourceChainSelector]) revert SourceChainNotAllowed(_sourceChainSelector);\n        // if (!allowlistedSenders[_sender]) revert SenderNotAllowed(_sender);\n        _;\n    }\n\n    /// @dev Updates the allowlist status of a destination chain for transactions.\n    /// @notice This function can only be called by the owner.\n    /// @param _destinationChainSelector The selector of the destination chain to be updated.\n    /// @param allowed The allowlist status to be set for the destination chain.\n    function allowlistDestinationChain(uint64 _destinationChainSelector, bool allowed) external onlyOwner {\n        allowlistedDestinationChains[_destinationChainSelector] = allowed;\n    }\n\n    /// @dev Updates the allowlist status of a source chain\n    /// @notice This function can only be called by the owner.\n    /// @param _sourceChainSelector The selector of the source chain to be updated.\n    /// @param allowed The allowlist status to be set for the source chain.\n    function allowlistSourceChain(uint64 _sourceChainSelector, bool allowed) external onlyOwner {\n        allowlistedSourceChains[_sourceChainSelector] = allowed;\n    }\n\n    /// @dev Updates the allowlist status of a sender for transactions.\n    /// @notice This function can only be called by the owner.\n    /// @param _sender The address of the sender to be updated.\n    /// @param allowed The allowlist status to be set for the sender.\n    function allowlistSender(address _sender, bool allowed) external onlyOwner {\n        allowlistedSenders[_sender] = allowed;\n    }\n\n    /// @param _destinationChainSelector The identifier (aka selector) for the destination blockchain.\n    /// @param _receiver The address of the recipient on the destination blockchain.\n    /// @param _data The data to be sent.\n    /// @param _token token address.\n    /// @param _amount token amount.\n    /// @param _feeToken Fee token address: native - address(0) or link - _s_link.\n    /// @param _gasLimit Gas limit for destination chain.\n    struct MassageParam {\n        uint64 destinationChainSelector;\n        address receiver;\n        bytes dataToSend;\n        bytes dataToExecute;\n        address token;\n        uint256 amount;\n        address feeToken; // native - address(0) or link - _s_link\n        uint256 gasLimit;\n    }\n\n    /// @notice Sends data and transfer tokens to receiver on the destination chain.\n    /// @notice Pay for fees in LINK.\n    /// @dev Assumes your contract has sufficient LINK to pay for CCIP fees.\n\n    /// @return messageId The ID of the CCIP message that was sent.\n    function _sendMessage(MassageParam calldata massageParam) internal virtual returns (bytes32 messageId);\n\n    /**\n     * @notice Returns the details of the last CCIP received message.\n     * @dev This function retrieves the ID, text, token address, and token amount of the last received CCIP message.\n     * @return messageId The ID of the last received CCIP message.\n     * @return data The data of the last received CCIP message.\n     * @return tokenAddress The address of the token in the last CCIP received message.\n     * @return tokenAmount The amount of the token in the last CCIP received message.\n     */\n    function getLastReceivedMessageDetails()\n        public\n        view\n        returns (bytes32 messageId, bytes memory data, address tokenAddress, uint256 tokenAmount)\n    {\n        return (s_lastReceivedMessageId, s_lastReceivedData, s_lastReceivedTokenAddress, s_lastReceivedTokenAmount);\n    }\n\n    /// handle a received message\n    function _ccipReceive(Client.Any2EVMMessage memory any2EvmMessage) internal virtual override;\n\n    /// @notice Construct a CCIP message.\n    /// @dev This function will create an EVM2AnyMessage struct with all the necessary information for programmable tokens transfer.\n    /// @param _receiver The address of the receiver.\n    /// @param _data The string data to be sent.\n    /// @param _token The token to be transferred.\n    /// @param _amount The amount of the token to be transferred.\n    /// @param _feeTokenAddress The address of the token used for fees. Set address(0) for native gas.\n    /// @param _gasLimit Gas limit for destination chain.\n    /// @return Client.EVM2AnyMessage Returns an EVM2AnyMessage struct which contains information for sending a CCIP message.\n    function _buildCCIPMessage(\n        address _receiver,\n        bytes calldata _data,\n        address _token,\n        uint256 _amount,\n        address _feeTokenAddress,\n        uint256 _gasLimit\n    ) internal pure returns (Client.EVM2AnyMessage memory) {\n        // Set the token amounts\n        Client.EVMTokenAmount[] memory tokenAmounts = new Client.EVMTokenAmount[](1);\n        tokenAmounts[0] = Client.EVMTokenAmount({token: _token, amount: _amount});\n        // Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\n        return\n            Client.EVM2AnyMessage({\n                receiver: abi.encode(_receiver), // ABI-encoded receiver address\n                data: _data,\n                tokenAmounts: tokenAmounts, // The amount and type of token being transferred\n                extraArgs: Client._argsToBytes(\n                    // Additional arguments, setting gas limit and non-strict sequencing mode\n                    Client.EVMExtraArgsV1({gasLimit: _gasLimit, strict: false}) //TODO: get gasLimit\n                ),\n                // Set the feeToken to a feeTokenAddress, indicating specific asset will be used for fees\n                feeToken: _feeTokenAddress\n            });\n    }\n\n    /// @notice Fallback function to allow the contract to receive Ether.\n    /// @dev This function has no function body, making it a default function for receiving Ether.\n    /// It is automatically called when Ether is sent to the contract without any data.\n    receive() external payable {}\n\n    /// @notice Allows the contract owner to withdraw the entire balance of Ether from the contract.\n    /// @dev This function reverts if there are no funds to withdraw or if the transfer fails.\n    /// It should only be callable by the owner of the contract.\n    /// @param _beneficiary The address to which the Ether should be sent.\n    // TODO: remove method\n    function withdraw(address _beneficiary) public onlyOwner {\n        // Retrieve the balance of this contract\n        uint256 amount = address(this).balance;\n\n        // Revert if there is nothing to withdraw\n        if (amount == 0) revert NothingToWithdraw();\n\n        // Attempt to send the funds, capturing the success status and discarding any return data\n        (bool sent, ) = _beneficiary.call{value: amount}(\"\");\n\n        // Revert if the send failed, with information about the attempted transfer\n        if (!sent) revert FailedToWithdrawEth(msg.sender, _beneficiary, amount);\n    }\n\n    /// @notice Allows the owner of the contract to withdraw all tokens of a specific ERC20 token.\n    /// @dev This function reverts with a 'NothingToWithdraw' error if there are no tokens to withdraw.\n    /// @param _beneficiary The address to which the tokens will be sent.\n    /// @param _token The contract address of the ERC20 token to be withdrawn.\n    // TODO: remove method\n    function withdrawToken(address _beneficiary, address _token) public onlyOwner {\n        // Retrieve the balance of this contract\n        uint256 amount = IERC20(_token).balanceOf(address(this));\n\n        // Revert if there is nothing to withdraw\n        if (amount == 0) revert NothingToWithdraw();\n\n        IERC20(_token).transfer(_beneficiary, amount);\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}